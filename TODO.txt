# Project Star TODO List

## Tasks

### Critical Tasks

#### FPGA Code Style and Standardization
- [ ] Verilog Code Style Fixes:
  - [ ] DE10_LITE_Golden_Top.v:
    - [ ] Add module description and port documentation
    - [ ] Standardize signal naming (all lowercase with underscores)
    - [ ] Group and document `define statements
  - [ ] DRAMControl.v:
    - [ ] Add state machine documentation
    - [ ] Add timing diagrams in comments
    - [ ] Document memory interface signals
  - [x] vgaGen.v:
    - [x] Standardize formatting and indentation
    - [ ] Document VGA timing parameters
    - [ ] Add waveform diagrams in comments
  - [x] buffCapControl.v:
    - [x] Standardize formatting and indentation
    - [ ] Document buffer control logic
    - [ ] Add state machine diagrams
  - [x] dataRegistering.v:
    - [x] Standardize formatting and indentation
    - [ ] Document data flow and timing
    - [ ] Add signal descriptions
  - [ ] lineBuffer.v:
    - [ ] Document memory organization
    - [ ] Add timing requirements
  - [ ] refCLKPLL.v:
    - [ ] Document clock frequencies and relationships
    - [ ] Add timing constraints
  - [x] testBench.v:
    - [x] Standardize formatting and indentation
    - [ ] Add test case documentation
    - [ ] Document test coverage
  - [ ] General Style Guidelines:
    - [x] Use consistent indentation (2 spaces)
    - [x] Use consistent comment style (/* */)
    - [x] Place begin on same line as if/else statements
    - [x] Place begin on next line after always blocks
    - [x] Remove excessive alignment across different blocks
    - [x] Use camelCase for signal names
    - [x] Add proper spacing around operators
    - [ ] Add parameter documentation
    - [ ] Add timing constraints documentation
    - [ ] Add block comments for major sections
    - [ ] Document all state machines
    - [ ] Add clock domain crossing documentation

#### Log Handler Implementation
- [x] Add timestamp to all log messages
- [x] Add sequence numbers for message ordering
- [x] Add thread/task ID for multi-threaded debugging
- [x] Log Storage and Management
  - [x] Implement log rotation
  - [ ] Add log compression for storage efficiency
  - [x] Add log filtering capabilities
  - [x] Implement log persistence across reboots
  - [x] Add log retrieval interface

#### Code Cleanup and Standardization
- [ ] Review and standardize inline function usage:
  - [x] Audit all .c files for inline functions that should be in headers
  - [ ] Move appropriate inline functions to header files
  - [ ] Document inline function usage guidelines
  - [ ] Add static analysis checks for inline function placement
- [ ] Function Attributes and Safety:
  - [ ] Add format attributes to all printf-style functions
  - [ ] Review and fix variadic argument handling
  - [ ] Add null pointer checks to all public functions
  - [ ] Add range validation for critical parameters
- [ ] Array Size Standardization:
  - [x] Replace all hardcoded array sizes with macros
  - [ ] Create consistent naming convention for size macros
  - [ ] Document array size macro usage in coding standards
  - [ ] Add static analysis checks for hardcoded array sizes

#### Critical Section Protection
- [ ] Implement critical section protection throughout codebase:
  - [ ] Add portMUX_TYPE for each sensor/component that requires timing-sensitive operations
  - [ ] Use portENTER_CRITICAL() and portEXIT_CRITICAL() macros around timing-critical sections
  - [ ] Standardize critical section approach:
    - [ ] Create component-specific macros (e.g., DHT22_ENTER_CRITICAL(), DHT22_EXIT_CRITICAL())
    - [ ] Add proper documentation explaining the purpose and importance of each critical section
    - [ ] Ensure critical sections are as short as possible
    - [ ] Add proper error handling to ensure critical sections are always exited
  - [ ] Identify and protect all timing-sensitive components:
    - [x] DHT22 sensor
    - [ ] OV7670 camera operations
    - [ ] I2C communications
    - [ ] SPI communications
    - [ ] Motor control timing
    - [ ] Encoder reading
  - [ ] Add guidelines for critical section usage to coding standards
  - [ ] Create static analysis check to ensure paired enter/exit critical calls

#### Error Handling
- [ ] Core Components Error Handler Integration
  - [ ] DHT22 sensor
  - [ ] GY-NEO6MV2 GPS module
  - [ ] MPU6050 motion sensor
  - [ ] QMC5883L compass
  - [ ] SD Card module
- [ ] Error Handler Implementation
  - [ ] Initialize error handlers in sensor initialization functions
  - [ ] Implement reset error handler functionality
  - [ ] Add exponential backoff for all components
- [ ] System-wide Error Management
  - [ ] Implement consistent error handling across components
  - [ ] Add comprehensive system diagnostics
  - [ ] Create standardized logging function:
    - [ ] Format: log(tag, level, action, status, [details])
    - [ ] Example: log(system_tag, ESP_LOGI, "Starting sensor initialization", "In Progress", "Configuring I2C")
    - [ ] Auto-formats as: "- Starting sensor initialization - In Progress - Configuring I2C"
    - [ ] Support variable arguments for dynamic content
    - [ ] Maintain ESP-IDF log levels (ESP_LOGE, ESP_LOGW, ESP_LOGI, etc.)
  - [ ] Enhance error reporting and logging

#### System Stability
- [ ] Memory Management
  - [ ] Add memory usage monitoring
  - [ ] Implement memory leak detection
  - [ ] Add heap fragmentation monitoring
- [ ] Task Management
  - [ ] Implement task watchdog
  - [ ] Add task stack monitoring
  - [ ] Optimize task priorities and scheduling

### High Priority Tasks

#### Sensors
- [ ] MPU6050 Configuration and Integration
  - [ ] Configure sensor values for accuracy
  - [ ] Implement interrupt handler using GPIO_NUM_26
  - [ ] Add proper integration with the system
  - [ ] Implement motion detection alerts
  - [ ] MPU6050 Sensor Implementation Improvements:
    1. **Enhanced Error Handling and Recovery**:
       - [ ] Implement robust error detection and recovery mechanism
       - [ ] Add reset function that power cycles the sensor and reconfigures it
       - [ ] Implement exponential backoff for retry attempts to avoid excessive resets
       - [ ] Add tracking of consecutive errors and timeouts
       - [ ] Implement automatic recovery from communication failures
    
    2. **Improved Data Processing**:
       - [ ] Add moving average filter to reduce noise in sensor readings
       - [ ] Implement validation of sensor readings against expected ranges
       - [ ] Enhance data conversion process with better calibration
       - [ ] Add outlier detection and filtering
       - [ ] Implement signal processing algorithms for more accurate readings
    
    3. **Calibration System**:
       - [ ] Create comprehensive calibration process that collects multiple samples
       - [ ] Add functions to save and load calibration values to/from NVS
       - [ ] Implement automatic loading of calibration values during initialization
       - [ ] Add user-triggered calibration routine
       - [ ] Implement periodic recalibration checks
    
    4. **Power Management**:
       - [ ] Add sleep and wake-up functions to save power during idle periods
       - [ ] Implement automatic power management in the sensor task
       - [ ] Add proper handling of sensor state during power transitions
       - [ ] Implement power consumption monitoring
       - [ ] Add low-power modes for battery operation
    
    5. **Sensor Health Monitoring**:
       - [ ] Add tracking of consecutive errors and timeouts
       - [ ] Implement watchdog mechanism to detect unresponsive sensors
       - [ ] Add periodic logging of sensor health statistics
       - [ ] Implement diagnostic routines for sensor troubleshooting
       - [ ] Add temperature monitoring to detect overheating
    
    6. **Self-Test Functionality**:
       - [ ] Create comprehensive self-test function that verifies sensor functionality
       - [ ] Add checks for sensor identity, I2C communication, and data reading
       - [ ] Integrate self-test into the initialization process
       - [ ] Implement periodic self-tests during operation
       - [ ] Add detailed reporting of self-test results
    
    7. **Task Management**:
       - [ ] Improve sensor task with better error handling and recovery
       - [ ] Add tracking of successful readings and error rates
       - [ ] Enhance interrupt handling with better timeout management
       - [ ] Implement priority-based processing of sensor data
       - [ ] Add task statistics collection for performance monitoring

- [ ] OV7670 Camera
  - [ ] Complete camera configurations
  - [ ] Add support for all 6 cameras
  - [ ] Re-enable camera monitoring task
  - [ ] Implement frame buffering system
  - [ ] Add camera synchronization mechanism

- [ ] GPS (GY-NEO6MV2)
  - [ ] Complete GPS integration
  - [ ] Fix current non-working state
  - [ ] Add position accuracy validation
  - [ ] Implement geofencing capabilities

#### Storage
- [ ] SD Card Improvements
  - [ ] Implement CD (Card Detect) functionality
  - [ ] Add SDIO support
  - [ ] Test and verify SD card operations
  - [ ] Add filesystem integrity checks
  - [ ] Implement data backup mechanism

### Medium Priority Tasks

#### Motor Control
- [ ] Gait Implementation
  - [ ] Implement tripod_gait() function
  - [ ] Implement wave_gait() function
  - [ ] Implement ripple_gait() function
  - [ ] Implement quadruped_gait() function
  - [ ] Verify accuracy of motor movement calculations
  - [ ] Add smooth transition between gaits

- [ ] Motor Mapping
  - [ ] Map motors with their identifications (hip/femur/tibia)
  - [ ] Determine custom values for each motor's max/min angles
  - [ ] Add motor calibration routine
  - [ ] Implement motor position feedback

#### Controllers
- [ ] EC11 Encoder
  - [ ] Integrate the MCP23018
  - [ ] Initialize EC11 encoders properly
  - [ ] Test functionality
  - [ ] Replace hardcoded implementation for first 3 motors
  - [ ] Add position persistence
  - [ ] Implement emergency stop functionality

#### Measurements
- [ ] Physical Measurements
  - [ ] Replace placeholder values with actual measurements:
    - [ ] hip_length_cm (currently 5.0f)
    - [ ] femur_length_cm (currently 10.0f)
    - [ ] tibia_length_cm (currently 12.0f)
  - [ ] Add calibration procedure
  - [ ] Document measurement process

### Low Priority Tasks

#### Sensors
- [ ] CCS811 Air Quality Sensor
  - [ ] Fix non-working state
  - [ ] Complete integration
  - [ ] Add air quality alerts
  - [ ] Implement sensor warmup handling

#### System Management
- [ ] File Management
  - [x] Test file_write_manager functionality
  - [ ] Implement consistent logging across files
  - [ ] Add log rotation
  - [ ] Implement data compression
  - [ ] Implement directory creation support in file_write_manager
    - [ ] Parse file paths to extract directory components
    - [ ] Create each directory level if it doesn't exist
    - [ ] Log success/failure of directory creation
  - [ ] Implement graceful shutdown mechanism for file_write_manager
    - [ ] Process remaining items in the write queue
    - [ ] Close open files properly
    - [ ] Free allocated resources
    - [ ] Signal completion to allow safe power down
  - [ ] Enhance error handling in file_write_manager
    - [ ] Add retry mechanism with exponential backoff
    - [ ] Implement fallback storage options
    - [ ] Track error statistics for diagnostics
    - [ ] Add watchdog integration
    - [ ] Implement critical data prioritization

- [ ] Time Management
  - [ ] Make time synchronization non-blocking
  - [ ] Add NTP fallback mechanisms
  - [ ] Implement timezone handling

#### Documentation
- [ ] Code Documentation
  - [ ] Add inline documentation for all functions
  - [ ] Create API documentation
  - [ ] Add system architecture diagrams
  - [ ] Document error codes and recovery procedures

#### Testing
- [ ] Test Infrastructure
  - [ ] Create unit tests for each component
  - [ ] Add integration tests
  - [ ] Implement automated testing
  - [ ] Add performance benchmarks

## Changelog

### 2025-02-26
- Added sequence numbers to all log messages
- Added timestamp to all log messages
- Added thread/task ID for multi-threaded debugging

### 2025-02-25
- FPGA Code Style Improvements:
  - Reformatted all Verilog files to follow consistent style guidelines:
    - Updated buffCapControl.v with consistent comment style and indentation
    - Updated vgaGen.v with proper formatting and comment style
    - Updated dataRegistering.v with consistent indentation and spacing
    - Updated testBench.v with proper formatting without cross-block alignment
  - Applied consistent style across all files:
    - Used /* */ style comments instead of // comments
    - Placed begin on the same line as if/else statements
    - Placed begin on the next line after always blocks
    - Used consistent 2-space indentation
    - Removed excessive alignment across different blocks
    - Used camelCase for signal names
    - Added proper spacing around operators

### 2025-02-24
- FPGA Project Cleanup:
  - Added .gitignore patterns for Quartus-generated files
  - Added .gitignore patterns for AMD/Xilinx-generated files
  - Removed tracked generated files from repository:
    - Removed db/, incremental_db/, output_files/, and greybox_tmp/ directories
    - Removed *_bb.v (black box) files
    - Removed .qws, .bak, .rpt, .ppf files
    - Removed other Quartus-generated temporary files
  - Added file headers to all Verilog files
  - Added new FPGA Code Style TODOs for all Verilog files

### 2025-02-24
- Updated sensor HALs to use new logging format:
  - Converted BH1750 sensor HAL from ESP_LOG* to log_*
  - Converted MQ135 sensor HAL from ESP_LOG* to log_*
  - MQ135 has better error handling and logging
- Updated controller HALs to use new logging format:
  - Converted PCA9685 motor controller HAL from ESP_LOG* to log_*
  - Converted EC11 encoder HAL from ESP_LOG* to log_*
- Updated common components to use new logging format:
  - Converted log_handler.c from ESP_LOG* to log_*
  - Converted error_handler.c from ESP_LOG* to log_*
  - Converted i2c.c from ESP_LOG* to log_*
  - Converted uart.c from ESP_LOG* to log_*
- Updated sd_card_hal.c to use new logging format:
  - Converted sd_card_hal.c from ESP_LOG* to log_*
- Updated time_manager.c to use new logging format:
  - Converted time_manager.c from ESP_LOG* to log_*
- Updated sensor_tasks.c to use new logging format:
  - Converted sensor_tasks.c from ESP_LOG* to log_*
- Updated webserver_tasks.c to use new logging format:
  - Converted webserver_tasks.c from ESP_LOG* to log_*
- Updated file_write_manager.c to use new logging format:
  - Converted file_write_manager.c from ESP_LOG* to log_*
- Updated main.c to use new logging format:
  - Converted main.c from ESP_LOG* to log_*
- Updated gait_movement.c to use new logging format:
  - Converted gait_movement.c from ESP_LOG* to log_*
- Updated hexapod_geometry.c to use new logging format:
  - Converted hexapod_geometry.c from ESP_LOG* to log_*
- Updated %d to %u in all log messages that include unsigned integers

### 2025-02-23 
- Updated sensor HALs to use new logging format:
  - Converted DHT22 sensor HAL from ESP_LOG* to log_*
  - Converted GY-NEO6MV2 GPS HAL from ESP_LOG* to log_*
  - Converted MPU6050 motion sensor HAL from ESP_LOG* to log_*
  - Converted QMC5883L compass HAL from ESP_LOG* to log_*
  - Converted OV7670 camera HAL from ESP_LOG* to log_*
  - Converted CCS811 air quality sensor HAL from ESP_LOG* to log_*
- Added descriptive action and status messages to all log calls
- Maintained existing functionality while updating log format

### 2025-02-22
- Initial TODO list creation
- Organized tasks by priority and component
- Added system-wide tasks for stability and testing
- Implemented core logging system with inline functions and proper variadic argument handling
