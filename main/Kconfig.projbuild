# main/Kconfig.projbuild

menu "Project Star Components Configuration"

    # --- I2C Bus Manager Configuration ---
    menu "I2C Bus Manager Configuration"
        config PSTAR_KCONFIG_BUS_COMPONENT_ENABLED
            bool "Enable I2C Bus Manager Component"
            default y
            help
                Enable the Project Star I2C Bus Manager component, which provides a unified
                interface for managing I2C bus/device configurations. This allows sharing
                I2C bus resources (pins, port, frequency) between multiple components.

        menu "Bus Manager Settings"
            depends on PSTAR_KCONFIG_BUS_COMPONENT_ENABLED

            config PSTAR_KCONFIG_BUS_MAX_BUSES
                int "Maximum number of I2C device configurations"
                range 1 32
                default 5
                help
                    Conceptual maximum number of I2C device configurations (bus name entries)
                    that can be managed simultaneously by the bus manager.
                    The implementation uses a linked list, so this isn't a hard limit,
                    but helps in conceptualizing resource allocation. Each unique combination
                    of port, pins, and frequency typically requires a separate bus entry.

            config PSTAR_KCONFIG_BUS_MUTEX_TIMEOUT_MS
                int "Bus manager mutex timeout (ms)"
                range 10 10000
                default 1000
                help
                    Timeout in milliseconds for acquiring the bus manager's internal mutex,
                    which protects access to the list of bus configurations.
        endmenu # Bus Manager Settings
    endmenu # I2C Bus Manager Configuration

    # --- Pin Validator Configuration ---
    menu "Pin Validator"
        config PSTAR_KCONFIG_PIN_VALIDATOR_ENABLED
            bool "Enable Pin Validator"
            default y
            help
                Enable the pin validation system to detect pin assignment conflicts
                across all components that register their pin usage. Essential for
                preventing hardware conflicts when multiple components use GPIOs.
    endmenu # Pin Validator

    # --- Error Handling Configuration ---
    menu "Error Handling Configuration"
        config PSTAR_KCONFIG_ERROR_HANDLER_ENABLED
            bool "Enable Error Handling Component"
            default y
            help
                Enable the Project Star Error Handling component, which provides
                a unified way to handle, log, and potentially recover from errors
                reported by various components.
    endmenu # Error Handling Configuration

    # --- JTAG Configuration ---
    menu "JTAG Configuration"
        config PSTAR_KCONFIG_JTAG_ENABLED
            bool "Enable JTAG Support"
            default n
            help
                Enable JTAG debug support in the system. This typically reserves
                specific GPIO pins for debugging purposes. Ensure these pins do not
                conflict with other peripherals configured below.
                The default pins are automatically selected based on your target MCU
                (set via 'idf.py set-target').

        if PSTAR_KCONFIG_JTAG_ENABLED

            choice PSTAR_KCONFIG_JTAG_PIN_CONFIGURATION_MODE
                prompt "JTAG Pin Configuration Mode"
                default PSTAR_KCONFIG_JTAG_USE_DEFAULT
                help
                    Select how JTAG pins are configured.
                    - Default: Use standard pins for the current target MCU (ESP32, S2, S3, etc.).
                    - Custom: Manually specify GPIO pins for each JTAG signal.

                config PSTAR_KCONFIG_JTAG_USE_DEFAULT
                    bool "Use default JTAG pin configuration for target MCU"

                config PSTAR_KCONFIG_JTAG_USE_CUSTOM
                    bool "Use custom JTAG pin configuration"

            endchoice

            # --- Default Pin Definitions (Hidden, set based on target) ---
            config PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TCK
                int
                default 13 if IDF_TARGET_ESP32
                default 39 if IDF_TARGET_ESP32S2 || IDF_TARGET_ESP32S3
                # Add defaults for other targets (C3, C6, H2, etc.) if needed
                default -1 # Default to invalid if target not matched

            config PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TMS
                int
                default 14 if IDF_TARGET_ESP32
                default 40 if IDF_TARGET_ESP32S2 || IDF_TARGET_ESP32S3
                default -1

            config PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TDI
                int
                default 12 if IDF_TARGET_ESP32
                default 41 if IDF_TARGET_ESP32S2 || IDF_TARGET_ESP32S3
                default -1

            config PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TDO
                int
                default 15 if IDF_TARGET_ESP32
                default 42 if IDF_TARGET_ESP32S2 || IDF_TARGET_ESP32S3
                default -1

            # --- Custom Pin Definitions ---
            config PSTAR_KCONFIG_JTAG_PIN_TCK_CUSTOM
                int "Custom GPIO for TCK (Test Clock)"
                depends on PSTAR_KCONFIG_JTAG_USE_CUSTOM
                range 0 54 # Adjust max range based on most capable supported MCU
                default 13
                help
                    Specify the GPIO number to use for the TCK (clock) signal.
                    Verify pin validity for JTAG on your target MCU.

            config PSTAR_KCONFIG_JTAG_PIN_TMS_CUSTOM
                int "Custom GPIO for TMS (Test Mode Select)"
                depends on PSTAR_KCONFIG_JTAG_USE_CUSTOM
                range 0 54
                default 14
                help
                    Specify the GPIO number to use for the TMS signal.
                    Verify pin validity for JTAG on your target MCU.

            config PSTAR_KCONFIG_JTAG_PIN_TDI_CUSTOM
                int "Custom GPIO for TDI (Test Data In)"
                depends on PSTAR_KCONFIG_JTAG_USE_CUSTOM
                range 0 54
                default 12
                help
                    Specify the GPIO number to use for the TDI signal.
                    Verify pin validity for JTAG on your target MCU.

            config PSTAR_KCONFIG_JTAG_PIN_TDO_CUSTOM
                int "Custom GPIO for TDO (Test Data Out)"
                depends on PSTAR_KCONFIG_JTAG_USE_CUSTOM
                range 0 54
                default 15
                help
                    Specify the GPIO number to use for the TDO signal.
                    Verify pin validity for JTAG on your target MCU.

            # --- Final Pin Values (Hidden, used by C code) ---
            config PSTAR_KCONFIG_JTAG_PIN_TCK
                int
                default PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TCK if PSTAR_KCONFIG_JTAG_USE_DEFAULT
                default PSTAR_KCONFIG_JTAG_PIN_TCK_CUSTOM if PSTAR_KCONFIG_JTAG_USE_CUSTOM
                depends on PSTAR_KCONFIG_JTAG_ENABLED

            config PSTAR_KCONFIG_JTAG_PIN_TMS
                int
                default PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TMS if PSTAR_KCONFIG_JTAG_USE_DEFAULT
                default PSTAR_KCONFIG_JTAG_PIN_TMS_CUSTOM if PSTAR_KCONFIG_JTAG_USE_CUSTOM
                depends on PSTAR_KCONFIG_JTAG_ENABLED

            config PSTAR_KCONFIG_JTAG_PIN_TDI
                int
                default PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TDI if PSTAR_KCONFIG_JTAG_USE_DEFAULT
                default PSTAR_KCONFIG_JTAG_PIN_TDI_CUSTOM if PSTAR_KCONFIG_JTAG_USE_CUSTOM
                depends on PSTAR_KCONFIG_JTAG_ENABLED

            config PSTAR_KCONFIG_JTAG_PIN_TDO
                int
                default PSTAR_KCONFIG_JTAG_DEFAULT_PIN_TDO if PSTAR_KCONFIG_JTAG_USE_DEFAULT
                default PSTAR_KCONFIG_JTAG_PIN_TDO_CUSTOM if PSTAR_KCONFIG_JTAG_USE_CUSTOM
                depends on PSTAR_KCONFIG_JTAG_ENABLED

        endif # PSTAR_KCONFIG_JTAG_ENABLED
    endmenu # JTAG Configuration

    # --- BH1750 Configuration ---
    menu "BH1750 Configuration"
        depends on PSTAR_KCONFIG_BUS_COMPONENT_ENABLED # Requires I2C Bus Manager

        config PSTAR_KCONFIG_BH1750_ENABLED
            bool "Enable BH1750 Light Sensor Component"
            default n
            help
                Enable the Project Star BH1750 Light Sensor component. This sensor
                measures ambient light levels (illuminance) in lux. It is typically
                considered a lower-speed I2C device (100kHz).

        if PSTAR_KCONFIG_BH1750_ENABLED

            config PSTAR_KCONFIG_BH1750_BUS_NAME
                string "I2C Bus Manager Name"
                default "bh1750_bus"
                help
                    The unique name identifying the I2C bus configuration within the
                    I2C Bus Manager that this BH1750 sensor will use. The Bus Manager
                    will use the Port, Pins, and Frequency defined below to create or
                    find this bus configuration.

            choice PSTAR_KCONFIG_BH1750_I2C_PORT
                prompt "I2C Port for BH1750"
                # --- DEFAULT: Port 1 for slower sensors ---
                default PSTAR_KCONFIG_BH1750_I2C_PORT_1
                help
                    Select the ESP-IDF I2C peripheral port number (I2C_NUM_x) the BH1750 is connected to.
                    Recommendation: Use I2C_NUM_1 for slower sensors (like BH1750 at 100kHz)
                    to separate them from high-speed devices often placed on I2C_NUM_0 (400kHz+).

                config PSTAR_KCONFIG_BH1750_I2C_PORT_0
                    bool "I2C Port 0 (I2C_NUM_0)"

                config PSTAR_KCONFIG_BH1750_I2C_PORT_1
                    bool "I2C Port 1 (I2C_NUM_1)"
            endchoice

            config PSTAR_KCONFIG_BH1750_I2C_FREQ_HZ
                int "I2C Clock Frequency (Hz)"
                range 10000 400000
                # --- DEFAULT: 100kHz suitable for BH1750 ---
                default 100000
                help
                    I2C clock frequency in Hz for the bus connected to the BH1750.
                    100000 (100kHz) is Standard mode, recommended for BH1750.
                    Ensure this matches the intended speed for the chosen I2C port (Port 1 recommended) and
                    other devices sharing the *exact same* bus configuration (port & pins).

            config PSTAR_KCONFIG_BH1750_SDA_PIN
                int "GPIO for SDA (I2C Data)"
                range 0 39 # Adjust range based on target MCU capabilities
                # --- DEFAULT: Common pin for I2C_NUM_1 on ESP32 ---
                default 25
                help
                    GPIO pin number for the I2C SDA (Data) line connection to the BH1750 sensor.
                    Ensure this pin is valid for I2C on your hardware and does not conflict
                    with pins used by other components or JTAG (if enabled).
                    GPIO 25 is a common choice for I2C_NUM_1 SDA on ESP32, but VERIFY YOUR BOARD'S PINOUT.

            config PSTAR_KCONFIG_BH1750_SCL_PIN
                int "GPIO for SCL (I2C Clock)"
                range 0 39 # Adjust range based on target MCU capabilities
                # --- DEFAULT: Common pin for I2C_NUM_1 on ESP32 ---
                default 26
                help
                    GPIO pin number for the I2C SCL (Clock) line connection to the BH1750 sensor.
                    Ensure this pin is valid for I2C on your hardware and does not conflict
                    with pins used by other components or JTAG (if enabled).
                    GPIO 26 is a common choice for I2C_NUM_1 SCL on ESP32, but VERIFY YOUR BOARD'S PINOUT.

            choice PSTAR_KCONFIG_BH1750_ADDR
                prompt "I2C Address Selection"
                default PSTAR_KCONFIG_BH1750_ADDR_LOW
                help
                    Select the 7-bit I2C address of the BH1750 sensor. This is typically
                    set by pulling the ADDR pin on the sensor board high (VCC) or low (GND).

                config PSTAR_KCONFIG_BH1750_ADDR_LOW
                    bool "0x23 (ADDR pin connected to GND)"

                config PSTAR_KCONFIG_BH1750_ADDR_HIGH
                    bool "0x5C (ADDR pin connected to VCC)"
            endchoice

            choice PSTAR_KCONFIG_BH1750_MODE
                prompt "Default Measurement Mode"
                default PSTAR_KCONFIG_BH1750_MODE_CONTINUOUS_HIGH_RES
                help
                    Select the operating mode for the BH1750 sensor.
                    - Continuous modes keep measuring automatically.
                    - One-Time modes take a single measurement then power down until commanded again.
                    - High resolution modes offer better accuracy (1lx or 0.5lx).
                    - Low resolution mode is faster but less accurate (4lx).

                config PSTAR_KCONFIG_BH1750_MODE_CONTINUOUS_HIGH_RES
                    bool "Continuous High Resolution Mode (1 lx resolution, ~120ms)"
                config PSTAR_KCONFIG_BH1750_MODE_CONTINUOUS_HIGH_RES2
                    bool "Continuous High Resolution Mode 2 (0.5 lx resolution, ~120ms)"
                config PSTAR_KCONFIG_BH1750_MODE_CONTINUOUS_LOW_RES
                    bool "Continuous Low Resolution Mode (4 lx resolution, ~16ms)"
                config PSTAR_KCONFIG_BH1750_MODE_ONE_TIME_HIGH_RES
                    bool "One Time High Resolution Mode (1 lx resolution, ~120ms)"
                config PSTAR_KCONFIG_BH1750_MODE_ONE_TIME_HIGH_RES2
                    bool "One Time High Resolution Mode 2 (0.5 lx resolution, ~120ms)"
                config PSTAR_KCONFIG_BH1750_MODE_ONE_TIME_LOW_RES
                    bool "One Time Low Resolution Mode (4 lx resolution, ~16ms)"
            endchoice

            config PSTAR_KCONFIG_BH1750_MEASUREMENT_TIMEOUT_MS
                int "Measurement timeout (ms)"
                range 30 2000
                default 200
                help
                    Maximum time in milliseconds to wait for a measurement to complete,
                    especially relevant for One-Time modes. Should be longer than the
                    typical measurement time for the selected mode (e.g., >120ms for high-res).

            config PSTAR_KCONFIG_BH1750_READ_INTERVAL_MS
                int "Sensor read interval (ms)"
                range 100 60000
                default 1000
                help
                    Interval in milliseconds between sensor readings attempted by the component's
                    main task loop (if applicable). This is independent of the sensor's internal
                    measurement time in continuous modes.

            config PSTAR_KCONFIG_BH1750_POWER_SAVE_MODE
                bool "Enable Power Save Mode (One-Time Modes Only)"
                default n
                help
                    When enabled with a One-Time measurement mode, the component will explicitly
                    send a power-down command after reading. This may be redundant as One-Time
                    modes typically power down automatically after measurement, but can ensure
                    the state if communication was interrupted. Ignored for continuous modes.

            config PSTAR_KCONFIG_BH1750_AUTO_RETRY
                bool "Enable Automatic Retry on I2C Error"
                default y
                help
                    If an I2C communication error occurs during read/write operations,
                    automatically retry the operation up to the specified count.

            config PSTAR_KCONFIG_BH1750_AUTO_RETRY_COUNT
                int "Auto Retry Count"
                depends on PSTAR_KCONFIG_BH1750_AUTO_RETRY
                range 1 10
                default 3
                help
                    Number of automatic retries to attempt before reporting a persistent
                    I2C communication error.

            config PSTAR_KCONFIG_BH1750_MUTEX_TIMEOUT_MS
                int "Component mutex timeout (ms)"
                range 10 5000
                default 1000
                help
                    Timeout in milliseconds for acquiring the component's internal mutex,
                    which protects access to the sensor state and I2C operations.
        endif # PSTAR_KCONFIG_BH1750_ENABLED
    endmenu # BH1750 Configuration

    # --- PCA9685 Configuration ---
    menu "PCA9685 PWM Driver Configuration"
        depends on PSTAR_KCONFIG_BUS_COMPONENT_ENABLED # Requires I2C Bus Manager

        config PSTAR_KCONFIG_PCA9685_ENABLED
            bool "Enable PCA9685 PWM Driver Component"
            default n
            help
                Enable the Project Star PCA9685 PWM Driver component. This component provides
                an interface for controlling the 16-channel PCA9685 PWM/Servo driver chip via I2C.
                It is typically considered a higher-speed I2C device (400kHz+).

        if PSTAR_KCONFIG_PCA9685_ENABLED

            config PSTAR_KCONFIG_PCA9685_BUS_NAME_PREFIX
                string "I2C Bus Manager Name Prefix for Defaults"
                default "pca9685_bus"
                help
                    The prefix for the I2C bus configuration name(s) in the Bus Manager
                    used by the automatically initialized default PCA9685 instance(s).
                    If initializing multiple defaults (Count > 1), a numeric suffix
                    (e.g., '_0', '_1') might be appended automatically by the component code
                    if they are intended to be on separate bus configurations (though typically
                    multiple PCA9685s share the same physical bus). This setting primarily helps
                    identify the bus configuration used by default instances.

            choice PSTAR_KCONFIG_PCA9685_I2C_PORT
                prompt "I2C Port for Default PCA9685(s)"
                # --- DEFAULT: Port 0 for faster devices ---
                default PSTAR_KCONFIG_PCA9685_I2C_PORT_0
                help
                    Select the ESP-IDF I2C peripheral port number (I2C_NUM_x) for the default PCA9685 instance(s).
                    Assumes all default PCA9685 boards initialized automatically are on the same I2C bus port.
                    Recommendation: Use I2C_NUM_0 for higher-speed devices like PCA9685 (400kHz+)
                    to separate them from slower sensors often placed on I2C_NUM_1 (100kHz).

                config PSTAR_KCONFIG_PCA9685_I2C_PORT_0
                    bool "I2C Port 0 (I2C_NUM_0)"

                config PSTAR_KCONFIG_PCA9685_I2C_PORT_1
                    bool "I2C Port 1 (I2C_NUM_1)"
            endchoice

            config PSTAR_KCONFIG_PCA9685_I2C_ADDR
                hex "Starting I2C Address for Default PCA9685(s)"
                default 0x40
                range 0x40 0x7F # Base address is 0x40, shifted via A0-A5 pins
                help
                    The 7-bit I2C address for the *first* default PCA9685 chip initialized automatically.
                    The default 0x40 assumes address pins A0-A5 are low. If initializing multiple
                    defaults with address increment enabled, subsequent boards will use incremented
                    addresses (e.g., 0x41, 0x42...). Ensure addresses are unique on the bus and
                    match the hardware configuration of your PCA9685 boards (A0-A5 pin settings).

            config PSTAR_KCONFIG_PCA9685_SDA_PIN
                int "GPIO for SDA (I2C Data) for Default PCA9685(s)"
                range 0 39 # Adjust range based on target MCU capabilities
                # --- DEFAULT: Common pin for I2C_NUM_0 on ESP32 ---
                default 21
                help
                    GPIO pin number used for the I2C SDA (Data) line for the default PCA9685(s).
                    Assumes all default boards share the same SDA pin. Ensure this pin is valid
                    for I2C on your hardware and does not conflict with other components or JTAG.
                    GPIO 21 is the standard default for I2C_NUM_0 SDA on ESP32, but VERIFY YOUR BOARD'S PINOUT.

            config PSTAR_KCONFIG_PCA9685_SCL_PIN
                int "GPIO for SCL (I2C Clock) for Default PCA9685(s)"
                range 0 39 # Adjust range based on target MCU capabilities
                # --- DEFAULT: Common pin for I2C_NUM_0 on ESP32 ---
                default 22
                help
                    GPIO pin number used for the I2C SCL (Clock) line for the default PCA9685(s).
                    Assumes all default boards share the same SCL pin. Ensure this pin is valid
                    for I2C on your hardware and does not conflict with other components or JTAG.
                    GPIO 22 is the standard default for I2C_NUM_0 SCL on ESP32, but VERIFY YOUR BOARD'S PINOUT.

            config PSTAR_KCONFIG_PCA9685_I2C_FREQ_HZ
                int "I2C Clock Frequency (Hz) for Default PCA9685(s)"
                range 10000 1000000 # PCA9685 supports up to 1MHz Fast Mode Plus
                # --- DEFAULT: 400kHz Fast Mode suitable for PCA9685 ---
                default 400000
                help
                    I2C clock frequency in Hz for the bus used by the default PCA9685(s).
                    400000 (400kHz) is Fast mode, a good default for PCA9685.
                    1000000 (1MHz) is Fast Mode Plus (check MCU/board/pull-up resistor support).
                    Ensure this frequency is compatible with other devices sharing the exact
                    same bus configuration (port & pins).

            config PSTAR_KCONFIG_PCA9685_DEFAULT_PWM_FREQ_HZ
                int "Default PWM Frequency (Hz) for Default PCA9685(s)"
                range 24 1526 # PCA9685 operational range
                default 50
                help
                    The PWM frequency (cycles per second) to set upon initialization for all
                    automatically initialized default PCA9685 boards.
                    - 50Hz is standard for common analog servos.
                    - Higher frequencies (e.g., 100-1000Hz+) are used for LEDs or DC motor speed control.

            # --- Configuration for Initializing Multiple Defaults ---
            config PSTAR_KCONFIG_PCA9685_DEFAULT_INIT_COUNT
                int "Number of Default PCA9685 Boards to Initialize"
                range 0 16 # Set a reasonable upper limit for automatic init
                default 1
                help
                    Specify how many PCA9685 boards should be automatically initialized
                    by the component using the default settings (Bus Prefix, Port, Pins, Freq, PWM Freq, Start Address).
                    - Set to 0 to disable automatic initialization (requires manual component setup calls).
                    - Set to 1 to initialize only the single board specified by the Start I2C Address.
                    - Set >1 to initialize multiple boards, potentially using incrementing I2C addresses.

            config PSTAR_KCONFIG_PCA9685_DEFAULT_ADDR_INCREMENT
                bool "Increment I2C Address for Multiple Default Boards"
                depends on PSTAR_KCONFIG_PCA9685_DEFAULT_INIT_COUNT > 1
                default y
                help
                    If initializing more than one default board (Count > 1), enable this to automatically
                    increment the I2C address for each subsequent board during initialization
                    (e.g., Start Addr=0x40 -> Boards initialized at 0x40, 0x41, 0x42...).
                    Disable if your multiple default boards use non-sequential addresses or share the
                    same address (requires an I2C multiplexer, not handled by this simple increment logic).
                    Ensure your hardware address pins (A0-A5) are set correctly on each board
                    to match the expected sequential addresses if using this option.

            # --- Output Enable (OE) Pin Configuration ---
            config PSTAR_KCONFIG_PCA9685_USE_OE_PIN
                bool "Use Output Enable (OE) Pin"
                default n
                help
                    Enable control of the PCA9685's Output Enable (OE) pin via a dedicated GPIO.
                    This allows globally enabling/disabling all PWM outputs from the chip(s)
                    sharing the same OE pin connection. Requires configuring the GPIO pin below.

            if PSTAR_KCONFIG_PCA9685_USE_OE_PIN

                config PSTAR_KCONFIG_PCA9685_OE_PIN
                    int "GPIO for Output Enable (OE)"
                    range 0 39 # Adjust range based on target MCU capabilities
                    default 5 # Default to 5
                    help
                        GPIO pin number connected to the OE pin of the PCA9685 chip(s).
                        Ensure this pin does not conflict with other components or JTAG.
                        Set to 5 if OE pin control is not used or not connected.

                choice PSTAR_KCONFIG_PCA9685_OE_ACTIVE_LEVEL
                    prompt "OE Pin Active Level"
                    default PSTAR_KCONFIG_PCA9685_OE_ACTIVE_LOW
                    help
                        Select the logic level that enables the PCA9685 outputs via the OE pin.
                        Consult the PCA9685 datasheet or your board's schematic.
                        Typically, OE is active LOW (pulling low enables outputs).

                    config PSTAR_KCONFIG_PCA9685_OE_ACTIVE_LOW
                        bool "Active Low (0 = Enabled, 1 = Disabled)"

                    config PSTAR_KCONFIG_PCA9685_OE_ACTIVE_HIGH
                        bool "Active High (1 = Enabled, 0 = Disabled)"
                endchoice

            endif # PSTAR_KCONFIG_PCA9685_USE_OE_PIN

            # --- Servo Configuration ---
            menu "Servo Control Settings"
                depends on PSTAR_KCONFIG_PCA9685_ENABLED

                config PSTAR_KCONFIG_PCA9685_SERVO_MIN_PULSE_US
                    int "Servo Minimum Pulse Width (microseconds)"
                    range 500 1500
                    default 1000
                    help
                        The pulse width in microseconds corresponding to the servo's minimum angle (typically 0 degrees).
                        Adjust this based on your specific servo model's datasheet. Common values are 500-1000us.

                config PSTAR_KCONFIG_PCA9685_SERVO_MAX_PULSE_US
                    int "Servo Maximum Pulse Width (microseconds)"
                    range 1500 2500
                    default 2000
                    help
                        The pulse width in microseconds corresponding to the servo's maximum angle (typically 180 degrees).
                        Adjust this based on your specific servo model's datasheet. Common values are 2000-2500us.

                config PSTAR_KCONFIG_PCA9685_SERVO_ANGLE_RANGE
                    int "Servo Angle Range (degrees)"
                    range 90 270
                    default 180
                    help
                        The total angle range (in degrees) that the servo can travel between the minimum and maximum pulse widths.
                        Commonly 180 degrees for standard servos.

            endmenu # Servo Control Settings

        endif # PSTAR_KCONFIG_PCA9685_ENABLED
    endmenu # PCA9685 PWM Driver Configuration

    # --- DHT22 Configuration ---
    menu "DHT22 Configuration"

        config PSTAR_KCONFIG_DHT22_ENABLED
            bool "Enable DHT22 Temp/Humidity Sensor Component"
            default n
            help
                Enable the Project Star DHT22 Temperature and Humidity Sensor component.
                This sensor uses a custom one-wire protocol on a single GPIO pin.

        if PSTAR_KCONFIG_DHT22_ENABLED

            config PSTAR_KCONFIG_DHT22_GPIO_PIN
                int "GPIO Pin for DHT22 Data Line"
                range 0 39 # Adjust range based on target MCU capabilities
                default 4
                help
                    Specify the GPIO pin number connected to the DHT22 data line.
                    Ensure this pin is not used by other components or JTAG.
                    An external pull-up resistor (e.g., 4.7k-10k Ohm) is required between
                    this pin and VCC.

        endif # PSTAR_KCONFIG_DHT22_ENABLED
    endmenu # DHT22 Configuration

    # --- MQ135 Configuration ---
    menu "MQ135 Air Quality Sensor Configuration"

        config PSTAR_KCONFIG_MQ135_ENABLED
            bool "Enable MQ135 Air Quality Sensor Component"
            default n
            help
                Enable the Project Star MQ135 Air Quality Sensor component.
                This sensor provides an analog output voltage proportional to the
                concentration of various gases (e.g., NH3, NOx, alcohol, Benzene, smoke, CO2).
                Requires an ADC pin. Accurate PPM conversion requires calibration.

        if PSTAR_KCONFIG_MQ135_ENABLED

            choice PSTAR_KCONFIG_MQ135_PIN_MODE
                prompt "MQ135 Pin Selection Mode"
                default PSTAR_KCONFIG_MQ135_PIN_MODE_COMMON_GPIO
                help
                    Choose how to specify the ADC pin connected to the MQ135.
                    - Common GPIO Pin: Select from a list of common GPIOs suitable for ADC input
                      based on your target MCU (ESP32, S3, etc.). The ADC Unit and Channel
                      will be determined automatically. (Recommended)
                    - Custom Unit/Channel: Manually enter the ADC Unit and Channel number.
                      Use this if your pin isn't listed or for advanced configuration. Requires
                      checking your board's datasheet/pinout.

                config PSTAR_KCONFIG_MQ135_PIN_MODE_COMMON_GPIO
                    bool "Select Common GPIO Pin (Auto-detect Unit/Channel)"

                config PSTAR_KCONFIG_MQ135_PIN_MODE_CUSTOM
                    bool "Enter Custom ADC Unit and Channel"

            endchoice

            # --- Common GPIO Pin Selection (Target Specific) ---
            choice PSTAR_KCONFIG_MQ135_COMMON_GPIO
                prompt "Common GPIO Pin"
                depends on PSTAR_KCONFIG_MQ135_PIN_MODE_COMMON_GPIO
                default PSTAR_KCONFIG_MQ135_GPIO_34 if IDF_TARGET_ESP32 # Default for ESP32
                # Add defaults for other targets if desired, e.g.:
                # default PSTAR_KCONFIG_MQ135_GPIO_S3_1 if IDF_TARGET_ESP32S3
                help
                    Select the GPIO pin connected to the MQ135 sensor.
                    Only pins typically usable for ADC on the selected target MCU are shown.
                    The corresponding ADC Unit and Channel will be set automatically.
                    Verify the pin is available on your specific board.
                    WARNING: Using ADC2 pins can conflict with Wi-Fi on some chips (like ESP32). ADC1 is preferred.

                # --- ESP32 Specific Common Pins ---
                if IDF_TARGET_ESP32
                    config PSTAR_KCONFIG_MQ135_GPIO_36
                        bool "GPIO 36 (ADC1_CH0)"
                    config PSTAR_KCONFIG_MQ135_GPIO_39
                        bool "GPIO 39 (ADC1_CH3)"
                    config PSTAR_KCONFIG_MQ135_GPIO_32
                        bool "GPIO 32 (ADC1_CH4)"
                    config PSTAR_KCONFIG_MQ135_GPIO_33
                        bool "GPIO 33 (ADC1_CH5)"
                    config PSTAR_KCONFIG_MQ135_GPIO_34
                        bool "GPIO 34 (ADC1_CH6)"
                    config PSTAR_KCONFIG_MQ135_GPIO_35
                        bool "GPIO 35 (ADC1_CH7)"
                    # Common ADC2 Pins (Use with caution if Wi-Fi needed)
                    config PSTAR_KCONFIG_MQ135_GPIO_4
                        bool "GPIO 4 (ADC2_CH0)"
                    config PSTAR_KCONFIG_MQ135_GPIO_2
                        bool "GPIO 2 (ADC2_CH2)"
                    config PSTAR_KCONFIG_MQ135_GPIO_15
                        bool "GPIO 15 (ADC2_CH3)"
                    config PSTAR_KCONFIG_MQ135_GPIO_13
                        bool "GPIO 13 (ADC2_CH4)"
                    config PSTAR_KCONFIG_MQ135_GPIO_12
                        bool "GPIO 12 (ADC2_CH5)"
                    config PSTAR_KCONFIG_MQ135_GPIO_14
                        bool "GPIO 14 (ADC2_CH6)"
                    config PSTAR_KCONFIG_MQ135_GPIO_27
                        bool "GPIO 27 (ADC2_CH7)"
                    config PSTAR_KCONFIG_MQ135_GPIO_25
                        bool "GPIO 25 (ADC2_CH8)"
                    config PSTAR_KCONFIG_MQ135_GPIO_26
                        bool "GPIO 26 (ADC2_CH9)"
                endif # IDF_TARGET_ESP32

                # --- ESP32-S3 Specific Common Pins (Example) ---
                # Add similar sections for other supported targets (S2, C3, etc.)
                # Check ESP32-S3 datasheet for ADC pin mappings
                if IDF_TARGET_ESP32S3
                    config PSTAR_KCONFIG_MQ135_GPIO_S3_1
                        bool "GPIO 1 (ADC1_CH0)"
                    config PSTAR_KCONFIG_MQ135_GPIO_S3_2
                        bool "GPIO 2 (ADC1_CH1)"
                    config PSTAR_KCONFIG_MQ135_GPIO_S3_3
                        bool "GPIO 3 (ADC1_CH2)"
                    config PSTAR_KCONFIG_MQ135_GPIO_S3_4
                        bool "GPIO 4 (ADC1_CH3)"
                    config PSTAR_KCONFIG_MQ135_GPIO_S3_5
                        bool "GPIO 5 (ADC1_CH4)"
                    # Add common ADC2 pins for S3 if needed
                    config PSTAR_KCONFIG_MQ135_GPIO_S3_11
                        bool "GPIO 11 (ADC2_CH0)"
                    # ... etc
                endif # IDF_TARGET_ESP32S3

            endchoice # PSTAR_KCONFIG_MQ135_COMMON_GPIO

            # --- Custom Unit/Channel Selection ---
            choice PSTAR_KCONFIG_MQ135_ADC_UNIT_CHOICE_CUSTOM
                prompt "ADC Unit (Custom Mode)"
                depends on PSTAR_KCONFIG_MQ135_PIN_MODE_CUSTOM
                default PSTAR_KCONFIG_MQ135_ADC_UNIT_1_CUSTOM
                help
                    Select the ADC unit (1 or 2) for the custom channel.
                    Note: ADC2 channels may conflict with Wi-Fi usage on ESP32.

                config PSTAR_KCONFIG_MQ135_ADC_UNIT_1_CUSTOM
                    bool "ADC Unit 1 (ADC_UNIT_1)"

                config PSTAR_KCONFIG_MQ135_ADC_UNIT_2_CUSTOM
                    bool "ADC Unit 2 (ADC_UNIT_2)"
            endchoice

            config PSTAR_KCONFIG_MQ135_ADC_CHANNEL_CUSTOM
                int "ADC Channel (Custom Mode)"
                depends on PSTAR_KCONFIG_MQ135_PIN_MODE_CUSTOM
                range 0 9 # Max channel number across common ESP32 ADC units
                default 6
                help
                    Manually enter the ADC channel number (0-9).
                    You MUST verify the correct channel number corresponding to the GPIO pin
                    you are using on your specific ESP32 board/variant by consulting its
                    datasheet or pinout diagram. Ensure the chosen GPIO pin is not used
                    by other components.

            # --- Hidden configs to store the final Unit and Channel ---
            # Determine ADC Unit based on selections
            config PSTAR_KCONFIG_MQ135_ADC_UNIT
                int
                default 1 if PSTAR_KCONFIG_MQ135_PIN_MODE_COMMON_GPIO && (PSTAR_KCONFIG_MQ135_GPIO_36 || PSTAR_KCONFIG_MQ135_GPIO_39 || PSTAR_KCONFIG_MQ135_GPIO_32 || PSTAR_KCONFIG_MQ135_GPIO_33 || PSTAR_KCONFIG_MQ135_GPIO_34 || PSTAR_KCONFIG_MQ135_GPIO_35) # ESP32 ADC1
                default 2 if PSTAR_KCONFIG_MQ135_PIN_MODE_COMMON_GPIO && (PSTAR_KCONFIG_MQ135_GPIO_4 || PSTAR_KCONFIG_MQ135_GPIO_2 || PSTAR_KCONFIG_MQ135_GPIO_15 || PSTAR_KCONFIG_MQ135_GPIO_13 || PSTAR_KCONFIG_MQ135_GPIO_12 || PSTAR_KCONFIG_MQ135_GPIO_14 || PSTAR_KCONFIG_MQ135_GPIO_27 || PSTAR_KCONFIG_MQ135_GPIO_25 || PSTAR_KCONFIG_MQ135_GPIO_26) # ESP32 ADC2
                default 1 if PSTAR_KCONFIG_MQ135_PIN_MODE_COMMON_GPIO && (PSTAR_KCONFIG_MQ135_GPIO_S3_1 || PSTAR_KCONFIG_MQ135_GPIO_S3_2 || PSTAR_KCONFIG_MQ135_GPIO_S3_3 || PSTAR_KCONFIG_MQ135_GPIO_S3_4 || PSTAR_KCONFIG_MQ135_GPIO_S3_5) # ESP32-S3 ADC1 Example
                default 2 if PSTAR_KCONFIG_MQ135_PIN_MODE_COMMON_GPIO && (PSTAR_KCONFIG_MQ135_GPIO_S3_11) # ESP32-S3 ADC2 Example
                # Add mappings for other targets/pins here...
                default 1 if PSTAR_KCONFIG_MQ135_ADC_UNIT_1_CUSTOM # Custom Mode Unit 1
                default 2 if PSTAR_KCONFIG_MQ135_ADC_UNIT_2_CUSTOM # Custom Mode Unit 2
                depends on PSTAR_KCONFIG_MQ135_ENABLED

            # Determine ADC Channel based on selections
            config PSTAR_KCONFIG_MQ135_ADC_CHANNEL
                int
                # ESP32 ADC1 Mappings
                default 0 if PSTAR_KCONFIG_MQ135_GPIO_36
                default 3 if PSTAR_KCONFIG_MQ135_GPIO_39
                default 4 if PSTAR_KCONFIG_MQ135_GPIO_32
                default 5 if PSTAR_KCONFIG_MQ135_GPIO_33
                default 6 if PSTAR_KCONFIG_MQ135_GPIO_34
                default 7 if PSTAR_KCONFIG_MQ135_GPIO_35
                # ESP32 ADC2 Mappings
                default 0 if PSTAR_KCONFIG_MQ135_GPIO_4
                default 2 if PSTAR_KCONFIG_MQ135_GPIO_2
                default 3 if PSTAR_KCONFIG_MQ135_GPIO_15
                default 4 if PSTAR_KCONFIG_MQ135_GPIO_13
                default 5 if PSTAR_KCONFIG_MQ135_GPIO_12
                default 6 if PSTAR_KCONFIG_MQ135_GPIO_14
                default 7 if PSTAR_KCONFIG_MQ135_GPIO_27
                default 8 if PSTAR_KCONFIG_MQ135_GPIO_25
                default 9 if PSTAR_KCONFIG_MQ135_GPIO_26
                # ESP32-S3 ADC1 Mappings (Example)
                default 0 if PSTAR_KCONFIG_MQ135_GPIO_S3_1
                default 1 if PSTAR_KCONFIG_MQ135_GPIO_S3_2
                default 2 if PSTAR_KCONFIG_MQ135_GPIO_S3_3
                default 3 if PSTAR_KCONFIG_MQ135_GPIO_S3_4
                default 4 if PSTAR_KCONFIG_MQ135_GPIO_S3_5
                # ESP32-S3 ADC2 Mappings (Example)
                default 0 if PSTAR_KCONFIG_MQ135_GPIO_S3_11
                # Add mappings for other targets/pins here...
                # Custom Mode Channel
                default PSTAR_KCONFIG_MQ135_ADC_CHANNEL_CUSTOM if PSTAR_KCONFIG_MQ135_PIN_MODE_CUSTOM
                depends on PSTAR_KCONFIG_MQ135_ENABLED

            # --- Attenuation, Bitwidth, Samples (common to both modes) ---
            choice PSTAR_KCONFIG_MQ135_ADC_ATTEN_CHOICE
                prompt "ADC Attenuation"
                default PSTAR_KCONFIG_MQ135_ADC_ATTEN_11DB
                help
                    Select the attenuation level for the ADC channel. This determines the
                    measurable input voltage range. Choose the range that best covers the
                    expected output voltage of the MQ135 under your operating conditions.
                    11dB attenuation is usually required for sensors operating up to 3.3V.

                config PSTAR_KCONFIG_MQ135_ADC_ATTEN_0DB
                    bool "0dB Attenuation (Range: ~0-1.1V)"
                config PSTAR_KCONFIG_MQ135_ADC_ATTEN_2_5DB
                    bool "2.5dB Attenuation (Range: ~0-1.5V)"
                config PSTAR_KCONFIG_MQ135_ADC_ATTEN_6DB
                    bool "6dB Attenuation (Range: ~0-2.2V)"
                config PSTAR_KCONFIG_MQ135_ADC_ATTEN_11DB
                    bool "11dB Attenuation (Range: ~0-3.9V)"
            endchoice

            config PSTAR_KCONFIG_MQ135_ADC_ATTEN # Hidden config
                int
                default 0 if PSTAR_KCONFIG_MQ135_ADC_ATTEN_0DB
                default 1 if PSTAR_KCONFIG_MQ135_ADC_ATTEN_2_5DB
                default 2 if PSTAR_KCONFIG_MQ135_ADC_ATTEN_6DB
                default 3 if PSTAR_KCONFIG_MQ135_ADC_ATTEN_11DB
                depends on PSTAR_KCONFIG_MQ135_ENABLED

            choice PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_CHOICE
                prompt "ADC Bit Width"
                default PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_12
                help
                    Select the resolution (bit width) for the ADC conversion.
                    Higher bit width provides finer resolution. ESP32 supports 9-12 bits.

                config PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_9
                    bool "9-bit (ADC_BITWIDTH_9)"
                config PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_10
                    bool "10-bit (ADC_BITWIDTH_10)"
                config PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_11
                    bool "11-bit (ADC_BITWIDTH_11)"
                config PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_12
                    bool "12-bit (ADC_BITWIDTH_12)"
            endchoice

            config PSTAR_KCONFIG_MQ135_ADC_BITWIDTH # Hidden config
                int
                default 9 if PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_9
                default 10 if PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_10
                default 11 if PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_11
                default 12 if PSTAR_KCONFIG_MQ135_ADC_BITWIDTH_12
                depends on PSTAR_KCONFIG_MQ135_ENABLED

            config PSTAR_KCONFIG_MQ135_NUM_SAMPLES
                int "Number of ADC Samples to Average"
                range 1 256
                default 64
                help
                    Number of consecutive ADC readings to take and average for each
                    call to read_raw or read_voltage. Averaging helps reduce noise.

        endif # PSTAR_KCONFIG_MQ135_ENABLED
    endmenu # MQ135 Configuration

    # --- HD44780 Configuration ---
    menu "HD44780 LCD Configuration"

        config PSTAR_KCONFIG_HD44780_ENABLED
            bool "Enable HD44780 LCD Component"
            default n
            help
                Enable the Project Star HD44780 Character LCD component.
                Supports 4-bit parallel or I2C backpack (PCF8574) modes.

        if PSTAR_KCONFIG_HD44780_ENABLED

            choice PSTAR_KCONFIG_HD44780_INTERFACE_MODE
                prompt "Interface Mode"
                default PSTAR_KCONFIG_HD44780_MODE_PARALLEL
                help
                    Select the communication interface used to connect to the LCD.
                    - Parallel: Uses direct GPIO connections for RS, E, and D4-D7.
                    - I2C: Uses an I2C backpack module (typically PCF8574-based).
                           Requires the I2C Bus Manager component to be enabled.

                config PSTAR_KCONFIG_HD44780_MODE_PARALLEL
                    bool "4-bit Parallel Interface"

                config PSTAR_KCONFIG_HD44780_MODE_I2C
                    bool "I2C Interface (via PCF8574 Backpack)"
                    depends on PSTAR_KCONFIG_BUS_COMPONENT_ENABLED # I2C mode needs the bus manager
                    help
                        Select this if your LCD is connected via an I2C adapter board.
                        Configure the I2C bus settings below.

            endchoice

            # --- Parallel Interface Settings ---
            if PSTAR_KCONFIG_HD44780_MODE_PARALLEL

                config PSTAR_KCONFIG_HD44780_RS_PIN
                    int "GPIO Pin for RS (Register Select)"
                    range 0 39 # Adjust range based on target MCU capabilities
                    default 16
                    help
                        GPIO pin number connected to the LCD's RS pin.

                config PSTAR_KCONFIG_HD44780_E_PIN
                    int "GPIO Pin for E (Enable)"
                    range 0 39
                    default 17
                    help
                        GPIO pin number connected to the LCD's E pin.

                config PSTAR_KCONFIG_HD44780_D4_PIN
                    int "GPIO Pin for Data 4"
                    range 0 39
                    default 18
                    help
                        GPIO pin number connected to the LCD's D4 pin.

                config PSTAR_KCONFIG_HD44780_D5_PIN
                    int "GPIO Pin for Data 5"
                    range 0 39
                    default 19
                    help
                        GPIO pin number connected to the LCD's D5 pin.

                config PSTAR_KCONFIG_HD44780_D6_PIN
                    int "GPIO Pin for Data 6"
                    range 0 39
                    default 21 # Note: Common I2C SDA pin, ensure no conflict
                    help
                        GPIO pin number connected to the LCD's D6 pin.

                config PSTAR_KCONFIG_HD44780_D7_PIN
                    int "GPIO Pin for Data 7"
                    range 0 39
                    default 22 # Note: Common I2C SCL pin, ensure no conflict
                    help
                        GPIO pin number connected to the LCD's D7 pin.

            endif # PSTAR_KCONFIG_HD44780_MODE_PARALLEL

            # --- I2C Interface Settings ---
            if PSTAR_KCONFIG_HD44780_MODE_I2C

                config PSTAR_KCONFIG_HD44780_I2C_BUS_NAME
                    string "I2C Bus Manager Name"
                    default "lcd_i2c_bus"
                    help
                        The unique name identifying the I2C bus configuration within the
                        I2C Bus Manager that the LCD backpack will use. The Bus Manager
                        will use the Port, Pins, and Frequency defined below.

                choice PSTAR_KCONFIG_HD44780_I2C_PORT
                    prompt "I2C Port for LCD Backpack"
                    default PSTAR_KCONFIG_HD44780_I2C_PORT_0 # Default Port 0 for potential sharing
                    help
                        Select the ESP-IDF I2C peripheral port number (I2C_NUM_x) the
                        LCD backpack is connected to.

                    config PSTAR_KCONFIG_HD44780_I2C_PORT_0
                        bool "I2C Port 0 (I2C_NUM_0)"

                    config PSTAR_KCONFIG_HD44780_I2C_PORT_1
                        bool "I2C Port 1 (I2C_NUM_1)"
                endchoice

                config PSTAR_KCONFIG_HD44780_I2C_FREQ_HZ
                    int "I2C Clock Frequency (Hz)"
                    range 10000 400000 # PCF8574 typically supports up to 400kHz
                    default 100000 # Common standard mode speed
                    help
                        I2C clock frequency in Hz for the bus connected to the LCD backpack.
                        100000 (100kHz) Standard mode is common and reliable for PCF8574.
                        400000 (400kHz) Fast mode may also work.
                        Ensure compatibility with other devices sharing the bus configuration.

                config PSTAR_KCONFIG_HD44780_SDA_PIN
                    int "GPIO for SDA (I2C Data)"
                    range 0 39 # Adjust range based on target MCU capabilities
                    default 21 # Common default for I2C_NUM_0 on ESP32
                    help
                        GPIO pin number for the I2C SDA line connected to the LCD backpack.
                        Verify the pin mapping on your board.

                config PSTAR_KCONFIG_HD44780_SCL_PIN
                    int "GPIO for SCL (I2C Clock)"
                    range 0 39 # Adjust range based on target MCU capabilities
                    default 22 # Common default for I2C_NUM_0 on ESP32
                    help
                        GPIO pin number for the I2C SCL line connected to the LCD backpack.
                        Verify the pin mapping on your board.

                config PSTAR_KCONFIG_HD44780_I2C_ADDR
                    hex "I2C Address of LCD Backpack (PCF8574)"
                    default 0x27 # Common default for PCF8574 based backpacks
                    range 0x20 0x27 # Standard PCF8574 address range
                    help
                        The 7-bit I2C address of the LCD backpack module (usually a PCF8574).
                        Common addresses are 0x27 or 0x3F. Check your specific module
                        (address selection jumpers/solder pads). Use an I2C scanner if unsure.

            endif # PSTAR_KCONFIG_HD44780_MODE_I2C

            # --- Common LCD Settings (Size) ---
            config PSTAR_KCONFIG_HD44780_ROWS
                int "Number of LCD Rows"
                range 1 4
                default 2
                help
                    Number of rows on your specific LCD module (e.g., 2 for 16x2, 4 for 20x4).

            config PSTAR_KCONFIG_HD44780_COLS
                int "Number of LCD Columns"
                range 8 40
                default 16
                help
                    Number of columns on your specific LCD module (e.g., 16 for 16x2, 20 for 20x4).

        endif # PSTAR_KCONFIG_HD44780_ENABLED
    endmenu # HD44780 Configuration

    # --- Example Selection ---
    # Place this menu at the end, inside the main project menu
    choice PSTAR_EXAMPLE_SELECTION
        prompt "Select Example to Run"
        default PSTAR_EXAMPLE_NONE
        help
            Select which code routine to run. Choose 'Main Application' to run the
            standard Project-STAR logic. Selecting a specific example will run ONLY
            that example's code, bypassing the main application setup.

        config PSTAR_EXAMPLE_NONE
            bool "Main Application"
            help
                Run the standard Project-STAR application defined in main.c.

        # --- Add one config entry for EACH example ---

        config PSTAR_EXAMPLE_BH1750
            bool "BH1750 Example"
            depends on PSTAR_KCONFIG_BH1750_ENABLED # Example depends on the component
            help
                Run a standalone example demonstrating the BH1750 light sensor HAL.

        config PSTAR_EXAMPLE_PCA9685
            bool "PCA9685 Servo Sweep Example"
            depends on PSTAR_KCONFIG_PCA9685_ENABLED # Example depends on the component
            help
                Run a standalone example demonstrating the PCA9685 HAL for sweeping servos.

        config PSTAR_EXAMPLE_DHT22
            bool "DHT22 Example"
            depends on PSTAR_KCONFIG_DHT22_ENABLED # Example depends on the component
            help
                Run a standalone example demonstrating the DHT22 temperature/humidity sensor HAL.

        config PSTAR_EXAMPLE_MQ135
            bool "MQ135 Example"
            depends on PSTAR_KCONFIG_MQ135_ENABLED # Example depends on the component
            help
                Run a standalone example demonstrating the MQ135 air quality sensor HAL.

        config PSTAR_EXAMPLE_HD44780
            bool "HD44780 LCD Example"
            depends on PSTAR_KCONFIG_HD44780_ENABLED # Example depends on the component
            help
                Run a standalone example demonstrating the HD44780 LCD HAL.

        config PSTAR_EXAMPLE_PIN_VALIDATOR
             bool "Pin Validator Example"
             depends on PSTAR_KCONFIG_PIN_VALIDATOR_ENABLED # Example depends on the component
             help
                 Run a simple demonstration showing pin conflict detection using the Pin Validator.

        # --- Added Examples ---
        config PSTAR_EXAMPLE_ERROR_HANDLER
            bool "Error Handler Example"
            depends on PSTAR_KCONFIG_ERROR_HANDLER_ENABLED
            help
                Run a standalone example demonstrating the Error Handler utility.

        config PSTAR_EXAMPLE_JTAG
            bool "JTAG Configuration Example"
            depends on PSTAR_KCONFIG_JTAG_ENABLED
            help
                Run a standalone example demonstrating retrieval of JTAG pin configuration.
        # --- End Added ---

        # --- Add more examples as needed ---

    endchoice # PSTAR_EXAMPLE_SELECTION

endmenu # Project Star Components Configuration