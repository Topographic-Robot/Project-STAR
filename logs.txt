TODO: Make logs like this in every file

./components/sensors/qmc5883l_hal/qmc5883l_hal.c:
ESP_LOGI(qmc5883l_tag, "- Configuring DRDY pin - GPIO: %d", qmc5883l_drdy_pin);
ESP_LOGE(qmc5883l_tag, "- DRDY pin configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(qmc5883l_tag, "- DRDY pin configured successfully");
ESP_LOGE(qmc5883l_tag, "- JSON conversion failed - null data pointer");
ESP_LOGE(qmc5883l_tag, "- JSON conversion failed - could not create object");
ESP_LOGE(qmc5883l_tag, "- JSON conversion failed - error adding fields");
ESP_LOGE(qmc5883l_tag, "- JSON conversion failed - serialization error");
ESP_LOGI(qmc5883l_tag, "- Starting QMC5883L initialization");
ESP_LOGE(qmc5883l_tag, "- Initialization failed - null data pointer");
ESP_LOGI(qmc5883l_tag, "- Initializing I2C - bus: %d, freq: %d Hz", qmc5883l_i2c_bus, qmc5883l_i2c_freq_hz);
ESP_LOGE(qmc5883l_tag, "- I2C initialization failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(qmc5883l_tag, "- Configuring sensor - mode: continuous, ODR: %d Hz", 
ESP_LOGE(qmc5883l_tag, "- Sensor configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(qmc5883l_tag, "- QMC5883L initialization complete - ready for measurements");
ESP_LOGE(qmc5883l_tag, "- Read failed - null data pointer");
ESP_LOGW(qmc5883l_tag, "- Read skipped - data not ready (DRDY pin low)");
ESP_LOGE(qmc5883l_tag, "- Read failed - error reading magnetometer data: %s", esp_err_to_name(ret));
ESP_LOGD(qmc5883l_tag, "- Read successful - X: %.2f, Y: %.2f, Z: %.2f µT, Heading: %.1f°",
-----

./components/sensors/ccs811_hal/ccs811_hal.c:
ESP_LOGI(ccs811_tag, "- Starting sensor reset - asserting reset pin");
ESP_LOGI(ccs811_tag, "- Waking up sensor - asserting wake pin");
ESP_LOGI(ccs811_tag, "- Starting sensor application");
ESP_LOGE(ccs811_tag, "- Application start failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(ccs811_tag, "- Reset complete - sensor ready");
ESP_LOGE(ccs811_tag, "- JSON conversion failed - null data pointer");
ESP_LOGE(ccs811_tag, "- JSON conversion failed - could not create object");
ESP_LOGE(ccs811_tag, "- JSON conversion failed - error adding fields");
ESP_LOGE(ccs811_tag, "- JSON conversion failed - serialization error");
ESP_LOGI(ccs811_tag, "- Starting CCS811 initialization");
ESP_LOGE(ccs811_tag, "- Initialization failed - null data pointer");
ESP_LOGI(ccs811_tag, "- Configuring error handler - max retries: %d", ccs811_max_retries);
ESP_LOGI(ccs811_tag, "- Initializing I2C - bus: %d, freq: %d Hz", ccs811_i2c_bus, ccs811_i2c_freq_hz);
ESP_LOGE(ccs811_tag, "- I2C initialization failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(ccs811_tag, "- Performing initial sensor setup");
ESP_LOGI(ccs811_tag, "- Initialization complete - sensor ready for measurements");
ESP_LOGE(ccs811_tag, "- Read failed - null data pointer");
ESP_LOGE(ccs811_tag, "- Read failed - error reading measurement data: %s", esp_err_to_name(ret));
ESP_LOGD(ccs811_tag, "- Read successful - eCO2: %d ppm, TVOC: %d ppb", 
ESP_LOGE(ccs811_tag, "- Task startup failed - invalid data pointer");
ESP_LOGI(ccs811_tag, "- Starting air quality sensor task - polling interval: %d ms",
ESP_LOGD(ccs811_tag, "- Data sent to webserver and file: %s", json);
ESP_LOGW(ccs811_tag, "- Failed to convert sensor data to JSON");
ESP_LOGW(ccs811_tag, "- Error detected - attempting recovery");
-----

./components/sensors/bh1750_hal/bh1750_hal.c:
ESP_LOGI(bh1750_tag, "- Starting sensor reset - powering on device");
ESP_LOGE(bh1750_tag, "- Power on failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(bh1750_tag, "- Resetting sensor registers");
ESP_LOGE(bh1750_tag, "- Reset failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(bh1750_tag, "- Configuring continuous measurement mode");
ESP_LOGE(bh1750_tag, "- Mode configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(bh1750_tag, "- Reset complete - sensor ready");
ESP_LOGE(bh1750_tag, "- JSON conversion failed - null data pointer");
ESP_LOGE(bh1750_tag, "- JSON conversion failed - could not create object");
ESP_LOGE(bh1750_tag, "- JSON conversion failed - error adding fields");
ESP_LOGE(bh1750_tag, "- JSON conversion failed - serialization error");
ESP_LOGI(bh1750_tag, "- Starting BH1750 initialization");
ESP_LOGE(bh1750_tag, "- Initialization failed - null data pointer");
ESP_LOGI(bh1750_tag, "- Configuring error handler - max retries: %d", bh1750_max_retries);
ESP_LOGI(bh1750_tag, "- Initializing I2C - bus: %d, freq: %d Hz", bh1750_i2c_bus, bh1750_i2c_freq_hz);
ESP_LOGE(bh1750_tag, "- I2C initialization failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(bh1750_tag, "- Performing initial sensor setup");
ESP_LOGI(bh1750_tag, "- Initialization complete - sensor ready for measurements");
ESP_LOGE(bh1750_tag, "- Read failed - null data pointer");
ESP_LOGE(bh1750_tag, "- Read failed - error reading measurement data: %s", esp_err_to_name(ret));
ESP_LOGD(bh1750_tag, "- Read successful - light intensity: %.2f lux", sensor_data->lux);
ESP_LOGE(bh1750_tag, "- Task startup failed - invalid data pointer");
ESP_LOGI(bh1750_tag, "- Starting light sensor task - polling interval: %d ms",
ESP_LOGD(bh1750_tag, "- Data sent to webserver and file: %s", json);
ESP_LOGW(bh1750_tag, "- Failed to convert sensor data to JSON");
ESP_LOGW(bh1750_tag, "- Error detected - attempting recovery");
-----

./components/sensors/dht22_hal/dht22_hal.c:
ESP_LOGE(dht22_tag, "Sensor not responding");
ESP_LOGE(dht22_tag, "Timeout waiting for bit start");
ESP_LOGE(dht22_tag, "Timeout waiting for bit end");
ESP_LOGE(dht22_tag, "Checksum failed");
ESP_LOGE(dht22_tag, "Failed to create JSON object.");
ESP_LOGE(dht22_tag, "Failed to add sensor_type to JSON.");
ESP_LOGE(dht22_tag, "Failed to add temperature_c to JSON.");
ESP_LOGE(dht22_tag, "Failed to add temperature_f  to JSON.");
ESP_LOGE(dht22_tag, "Failed to add humidity to JSON.");
ESP_LOGE(dht22_tag, "Failed to serialize JSON object.");
ESP_LOGI(dht22_tag, "Starting Configuration");
ESP_LOGE(dht22_tag, "Failed to configure GPIO: %s", esp_err_to_name(ret));
ESP_LOGI(dht22_tag, "Sensor Configuration Complete");
ESP_LOGE(dht22_tag, "Sensor data pointer is NULL");
ESP_LOGE(dht22_tag, "Failed to receive response from DHT22");
ESP_LOGE(dht22_tag, "Failed to read data bits from DHT22");
ESP_LOGE(dht22_tag, "Checksum verification failed");
ESP_LOGI(dht22_tag,
-----

./components/sensors/mpu6050_hal/mpu6050_hal.c:
ESP_LOGI(mpu6050_tag, "- Configuring INT pin - GPIO: %d", mpu6050_int_io);
ESP_LOGE(mpu6050_tag, "- INT pin configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(mpu6050_tag, "- INT pin configured successfully");
ESP_LOGE(mpu6050_tag, "- JSON conversion failed - null data pointer");
ESP_LOGE(mpu6050_tag, "- JSON conversion failed - could not create object");
ESP_LOGE(mpu6050_tag, "- JSON conversion failed - error adding fields");
ESP_LOGE(mpu6050_tag, "- JSON conversion failed - serialization error");
ESP_LOGI(mpu6050_tag, "- Starting MPU6050 initialization");
ESP_LOGE(mpu6050_tag, "- Initialization failed - null data pointer");
ESP_LOGI(mpu6050_tag, "- Initializing I2C - bus: %d, freq: %d Hz", mpu6050_i2c_bus, mpu6050_i2c_freq_hz);
ESP_LOGE(mpu6050_tag, "- I2C initialization failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(mpu6050_tag, "- Resetting device");
ESP_LOGE(mpu6050_tag, "- Device reset failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(mpu6050_tag, "- Waking up device");
ESP_LOGE(mpu6050_tag, "- Device wake-up failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(mpu6050_tag, "- Setting sample rate divider: %d", mpu6050_sample_rate_div);
ESP_LOGE(mpu6050_tag, "- Sample rate configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(mpu6050_tag, "- Setting DLPF bandwidth: %d Hz", 
ESP_LOGE(mpu6050_tag, "- DLPF configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(mpu6050_tag, "- Setting gyroscope range: ±%d°/s", 
ESP_LOGE(mpu6050_tag, "- Gyroscope configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(mpu6050_tag, "- Setting accelerometer range: ±%dg", 
ESP_LOGE(mpu6050_tag, "- Accelerometer configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(mpu6050_tag, "- Device verification failed - expected: 0x%02x, got: 0x%02x",
ESP_LOGI(mpu6050_tag, "- Device verified - ID: 0x%02x", who_am_i);
ESP_LOGI(mpu6050_tag, "- MPU6050 initialization complete - ready for measurements");
ESP_LOGE(mpu6050_tag, "- Read failed - null data pointer");
ESP_LOGE(mpu6050_tag, "- Read failed - error reading accelerometer data: %s", esp_err_to_name(ret));
ESP_LOGE(mpu6050_tag, "- Read failed - error reading gyroscope data: %s", esp_err_to_name(ret));
ESP_LOGE(mpu6050_tag, "- Read failed - error reading temperature data: %s", esp_err_to_name(ret));
ESP_LOGD(mpu6050_tag, "- Read successful - Accel(g): X:%.2f Y:%.2f Z:%.2f, Gyro(°/s): X:%.2f Y:%.2f Z:%.2f, Temp: %.1f°C",
ESP_LOGI(mpu6050_tag, "- Attempting sensor recovery - retry %d/%d",
ESP_LOGI(mpu6050_tag, "- Recovery successful - sensor reinitialized");
ESP_LOGW(mpu6050_tag, "- Recovery failed - retry %d/%d",
ESP_LOGW(mpu6050_tag, "- Maximum retries reached - increasing interval to %d ms",
ESP_LOGI(mpu6050_tag, "- Starting MPU6050 task - polling interval: %d ms",
ESP_LOGD(mpu6050_tag, "- Data sent to webserver and file: %s", json);
ESP_LOGW(mpu6050_tag, "- Failed to convert sensor data to JSON");
ESP_LOGW(mpu6050_tag, "- Failed to read sensor data - attempting recovery");
-----

./components/sensors/gy_neo6mv2_hal/gy_neo6mv2_hal.c:
ESP_LOGI(gy_neo6mv2_tag, "Satellite added: PRN=%d, Elevation=%d, Azimuth=%d, SNR=%d",
ESP_LOGW(gy_neo6mv2_tag, "Satellite buffer full, cannot add PRN=%d", prn);
ESP_LOGI(gy_neo6mv2_tag, "Satellite buffer cleared.");
ESP_LOGI(gy_neo6mv2_tag, "Retrieved %d satellites from the buffer.", count);
ESP_LOGE(gy_neo6mv2_tag, "- JSON conversion failed - null data pointer");
ESP_LOGE(gy_neo6mv2_tag, "- JSON conversion failed - could not create object");
ESP_LOGE(gy_neo6mv2_tag, "- JSON conversion failed - error adding fields");
ESP_LOGE(gy_neo6mv2_tag, "- JSON conversion failed - serialization error");
ESP_LOGI(gy_neo6mv2_tag, "Starting Configuration");
ESP_LOGE(gy_neo6mv2_tag, "UART initialization failed");
ESP_LOGI(gy_neo6mv2_tag, "GPS module initialized successfully");
ESP_LOGI(gy_neo6mv2_tag, "Raw NMEA sentence: %s", s_gy_neo6mv2_sentence_buffer);
ESP_LOGW(gy_neo6mv2_tag, "Invalid NMEA checksum: %s", s_gy_neo6mv2_sentence_buffer);
ESP_LOGI(gy_neo6mv2_tag, "GPRMC Status: %s (%s)",
ESP_LOGI(gy_neo6mv2_tag, "Valid fix: Lat=%f, Lon=%f, Speed=%f",
ESP_LOGW(gy_neo6mv2_tag, "Skipping invalid GPS reading.");
ESP_LOGI(gy_neo6mv2_tag, "GPGSV: Sentence %u of %u, Total Satellites in view: %u",
ESP_LOGI(gy_neo6mv2_tag, "Retrieved Satellite PRN=%d, Elevation=%d, Azimuth=%d, SNR=%d",
ESP_LOGE(gy_neo6mv2_tag, "Failed to read from GPS module");
ESP_LOGI(gy_neo6mv2_tag, "- Attempting sensor recovery - retry %d/%d",
ESP_LOGI(gy_neo6mv2_tag, "- Recovery successful - GPS module reinitialized");
ESP_LOGW(gy_neo6mv2_tag, "- Recovery failed - retry %d/%d",
ESP_LOGW(gy_neo6mv2_tag, "- Maximum retries reached - increasing interval to %d ms",
ESP_LOGI(gy_neo6mv2_tag, "- Starting GPS task - polling interval: %d ms",
ESP_LOGD(gy_neo6mv2_tag, "- Data sent to webserver and file: %s", json);
ESP_LOGW(gy_neo6mv2_tag, "- Failed to convert GPS data to JSON");
ESP_LOGW(gy_neo6mv2_tag, "- Failed to read GPS data - attempting recovery");
-----

./components/sensors/ov7670_hal/ov7670_hal.c:
ESP_LOGE(handle->tag, "- Camera not initialized");
ESP_LOGE(handle->tag, "- Failed to write register 0x%02X - error: %s",
ESP_LOGE(handle->tag, "- Invalid state or arguments");
ESP_LOGE(handle->tag, "- Failed to read register 0x%02X - error: %s",
ESP_LOGE(handle->tag, "- Unsupported pixel format: %d", handle->config.pixel_format);
ESP_LOGE(handle->tag, "- Failed to set pixel format");
ESP_LOGE(handle->tag, "- Invalid resolution: %dx%d", width, height);
ESP_LOGE(handle->tag, "- Failed to set resolution scaling");
ESP_LOGI(handle->tag, "- Format configured - %dx%d, %s",
ESP_LOGE(handle->tag, "- Failed to read clock settings");
ESP_LOGE(handle->tag, "- Failed to set frame rate");
ESP_LOGI(handle->tag, "- Frame rate set to %d fps", handle->config.frame_rate);
ESP_LOGE(handle->tag, "- Failed to read mirror/flip settings");
ESP_LOGE(handle->tag, "- Failed to set mirror/flip");
ESP_LOGI(handle->tag, "- Mirror/flip configured - mirror: %d, flip: %d",
ESP_LOGE(handle->tag, "- Failed to set brightness");
ESP_LOGE(handle->tag, "- Failed to set contrast");
ESP_LOGE(handle->tag, "- Failed to set saturation");
ESP_LOGI(handle->tag, "- Image quality configured - brightness: %d, contrast: %d, saturation: %d",
ESP_LOGI(tag, "- Initializing OV7670 camera");
ESP_LOGE(tag, "- I2C initialization failed");
ESP_LOGE(tag, "- Reset failed");
ESP_LOGE(tag, "- Failed to apply default settings");
ESP_LOGI(tag, "- OV7670 camera initialized successfully");
ESP_LOGE(handle->tag, "- Camera not initialized");
ESP_LOGE(handle->tag, "- Failed to start capture");
ESP_LOGI(handle->tag, "- Frame capture started");
ESP_LOGE(handle->tag, "- Camera not initialized");
ESP_LOGE(handle->tag, "- Failed to stop capture");
ESP_LOGI(handle->tag, "- Frame capture stopped");
ESP_LOGE(handle->tag, "- Camera not initialized");
ESP_LOGE(handle->tag, "- Failed to create JSON object");
ESP_LOGE(handle->tag, "- Invalid state or arguments");
ESP_LOGE(handle->tag, "- Failed to update parameters");
ESP_LOGI(handle->tag, "- Parameters updated successfully");
-----

./components/sensors/mq135_hal/mq135_hal.c:
ESP_LOGE("MQ135", "- JSON conversion failed - null data pointer");
ESP_LOGE("MQ135", "- JSON conversion failed - could not create object");
ESP_LOGE("MQ135", "- JSON conversion failed - error adding fields");
ESP_LOGE("MQ135", "- JSON conversion failed - serialization error");
ESP_LOGI("MQ135", "- Starting MQ135 initialization");
ESP_LOGE("MQ135", "- Initialization failed - null data pointer");
ESP_LOGI("MQ135", "- Configuring ADC - width: %d bits, attenuation: %d dB",
ESP_LOGE("MQ135", "- ADC width configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGE("MQ135", "- ADC attenuation configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI("MQ135", "- ADC characterized with default Vref: %d mV", mq135_default_vref);
ESP_LOGE("MQ135", "- Digital pin configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI("MQ135", "- Initialization complete - starting %d minute warm-up period",
ESP_LOGE("MQ135", "- Read failed - null data pointer");
ESP_LOGW("MQ135", "- Sensor still warming up - %d minutes remaining", remaining_minutes);
ESP_LOGI("MQ135", "- Warm-up period complete - sensor ready for measurements");
ESP_LOGE("MQ135", "- Read failed - error reading ADC value");
ESP_LOGD("MQ135", "- Read successful - ADC: %d, Voltage: %d mV, Gas: %.2f ppm",
ESP_LOGI("MQ135", "- Attempting sensor recovery - retry %d/%d",
ESP_LOGI("MQ135", "- Recovery successful - sensor reinitialized");
ESP_LOGW("MQ135", "- Recovery failed - retry %d/%d",
ESP_LOGW("MQ135", "- Maximum retries reached - increasing interval to %d ms",
-----

./components/camera/ov7670_hal/ov7670_hal.c:
ESP_LOGI(ov7670_tag, "Configuring XCLK on GPIO 27 at %" PRIu32 " Hz", freq_hz);
ESP_LOGE(ov7670_tag, "Failed to configure LEDC timer (err=0x%x)", ret);
ESP_LOGE(ov7670_tag, "Failed to configure LEDC channel (err=0x%x)", ret);
ESP_LOGE(ov7670_tag, "Failed to set COM7 (resolution/format).");
ESP_LOGE(ov7670_tag, "Failed to set CLKRC (clock divider).");
ESP_LOGI(ov7670_tag, "Configuration applied: COM7=0x%02X, CLKRC=0x%02X",
ESP_LOGE(ov7670_tag, "Camera data pointer is NULL");
ESP_LOGI(ov7670_tag, "Initializing OV7670 Camera");
ESP_LOGE(ov7670_tag, "I2C initialization failed");
ESP_LOGE(ov7670_tag, "Failed to configure XCLK on GPIO 27");
ESP_LOGI(ov7670_tag, "XCLK is now driven on GPIO 27 at %" PRIu32 " Hz",
ESP_LOGI(ov7670_tag, "No internal XCLK; an external clock is expected.");
ESP_LOGE(ov7670_tag, "Default configuration failed");
ESP_LOGI(ov7670_tag, "OV7670 initialization complete (state=%d)", camera_data->state);
ESP_LOGE(ov7670_tag, "Camera data pointer is NULL");
ESP_LOGI(ov7670_tag, "Applying new configuration to OV7670 Camera");
ESP_LOGE(ov7670_tag, "Configuration failed");
ESP_LOGI(ov7670_tag, "Configuration successfully applied (state=%d)",
ESP_LOGE(ov7670_tag, "Camera data pointer is NULL");
ESP_LOGW(ov7670_tag, "Attempting to reset OV7670 (retries=%d)", camera_data->retries);
ESP_LOGI(ov7670_tag, "OV7670 re-initialized successfully");
ESP_LOGE(ov7670_tag, "OV7670 re-initialization failed. Next retry interval = %" PRIu32 " ms",
ESP_LOGE(ov7670_tag, "Camera data pointer is NULL in ov7670_tasks");
ESP_LOGE(ov7670_tag, "Camera data pointer is NULL");
ESP_LOGI(ov7670_tag, "Camera monitoring task is disabled");
ESP_LOGE(ov7670_tag, "Failed to create camera monitoring task");
ESP_LOGI(ov7670_tag, "Successfully created camera monitoring task");
-----

./components/storage/sd_card_hal/sd_card_hal.c:
ESP_LOGI(sd_card_tag, "- Starting SD card cleanup - unmounting filesystem");
ESP_LOGI(sd_card_tag, "- SD card unmounted - freeing SPI bus");
ESP_LOGI(sd_card_tag, "- Cleanup complete - resources released");
ESP_LOGI(sd_card_tag, "- Starting SD card initialization");
ESP_LOGW(sd_card_tag, "- Retrying initialization - attempt %d/%d", retry_count + 1, sd_card_max_retries);
ESP_LOGI(sd_card_tag, "- Configuring SPI host - bus: %d, freq: %d kHz", sd_card_spi_host, sd_card_spi_freq_hz / 1000);
ESP_LOGI(sd_card_tag, "- Configuring SPI bus - MOSI: %d, MISO: %d, CLK: %d", 
ESP_LOGE(sd_card_tag, "- SPI bus initialization failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(sd_card_tag, "- SPI bus initialized successfully");
ESP_LOGI(sd_card_tag, "- Configuring SD card slot - CS pin: %d", sd_card_cs);
ESP_LOGI(sd_card_tag, "- Configuring filesystem - max files: %d, allocation unit: %d bytes", 
ESP_LOGI(sd_card_tag, "- Mounting filesystem - path: %s", sd_card_mount_path);
ESP_LOGE(sd_card_tag, "- Failed to mount filesystem - error: %s", esp_err_to_name(ret));
ESP_LOGI(sd_card_tag, "- SD card mounted successfully - type: %s, size: %lluMB", 
ESP_LOGI(sd_card_tag, "- SD card initialization complete - ready for operations");
ESP_LOGE(sd_card_tag, "- SD card initialization failed - maximum retries reached");
-----

./components/common/error_handler.c:
ESP_LOGE(error_handler_tag, "- Initialization failed - null handler pointer");
ESP_LOGI(error_handler_tag, "- Initializing error handler for %s", tag);
ESP_LOGI(error_handler_tag, "- Configuration: max retries: %d, initial interval: %d ms, max interval: %d ms",
ESP_LOGI(error_handler_tag, "- Initialization complete - handler ready");
ESP_LOGE(error_handler_tag, "- Error recording failed - null handler pointer");
ESP_LOGD(error_handler_tag, "- [%s] Skipping retry - waiting for backoff interval (%d ms remaining)",
ESP_LOGW(error_handler_tag, "- [%s] Error detected - retry %d/%d (error: %s)",
ESP_LOGW(error_handler_tag, "- [%s] Maximum retries reached - increasing backoff interval",
ESP_LOGI(error_handler_tag, "- [%s] New backoff interval: %d ms",
ESP_LOGI(error_handler_tag, "- [%s] Attempting recovery - calling reset function",
ESP_LOGI(error_handler_tag, "- [%s] Recovery successful - resetting retry parameters",
ESP_LOGW(error_handler_tag, "- [%s] Recovery failed - error: %s",
ESP_LOGE(error_handler_tag, "- Status recording failed - null handler pointer");
ESP_LOGI(error_handler_tag, "- [%s] Operation successful - resetting retry parameters",
ESP_LOGE(error_handler_tag, "- Reset failed - null handler pointer");
ESP_LOGI(error_handler_tag, "- [%s] Resetting error handler state", handler->tag);
-----

./components/common/i2c.c:
ESP_LOGI(tag, "- I2C initialization started - bus: %d, SCL: %d, SDA: %d, freq: %d Hz",
ESP_LOGE(tag, "- I2C configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(tag, "- I2C driver installation failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(tag, "- I2C initialization complete - bus ready");
ESP_LOGE(tag, "- I2C read failed - null data pointer");
ESP_LOGE(tag, "- I2C read failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(tag, "- I2C write failed - null data pointer");
ESP_LOGE(tag, "- I2C write failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(tag, "- I2C register read failed - null data pointer");
ESP_LOGE(tag, "- I2C register read failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(tag, "- I2C register write failed - error: %s", esp_err_to_name(ret));
-----

./components/common/uart.c:
ESP_LOGI(tag, "- UART initialization started - port: %d, baud: %d, TX: %d, RX: %d",
ESP_LOGE(tag, "- UART configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(tag, "- UART driver installation failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(tag, "- UART pin configuration failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(tag, "- UART initialization complete - port ready");
ESP_LOGE(tag, "- UART write failed - null data pointer");
ESP_LOGE(tag, "- UART write failed - error writing data");
ESP_LOGW(tag, "- UART write incomplete - wrote %d/%d bytes",
ESP_LOGE(tag, "- UART read failed - null pointer(s)");
ESP_LOGV(tag, "- UART read timeout - no data received");
ESP_LOGW(tag, "- UART read incomplete - read %d/%d bytes",
ESP_LOGE(tag, "- UART flush failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(tag, "- UART TX wait failed - error: %s", esp_err_to_name(ret));
-----

./components/controllers/pca9685_hal/pca9685_hal.c:
ESP_LOGI(pca9685_tag, "PCA9685 board %d already initialized", i);
ESP_LOGE(pca9685_tag, "Failed to allocate memory for PCA9685 board %d", i);
ESP_LOGE(pca9685_tag, "Failed to initialize I2C for PCA9685 board %d", i);
ESP_LOGE(pca9685_tag, "Failed to put PCA9685 board %d into sleep mode", i);
ESP_LOGE(pca9685_tag, "Failed to set prescaler value for PCA9685 board %d", i);
ESP_LOGE(pca9685_tag, "Failed to restart PCA9685 board %d", i);
ESP_LOGE(pca9685_tag, "Failed to set MODE2 for PCA9685 board %d", i);
ESP_LOGE(pca9685_tag, "Failed to set motors on board %d", i);
ESP_LOGE(pca9685_tag, "Controller data is NULL");
ESP_LOGE(pca9685_tag, "Invalid board_id: %d. Number of boards: %d", board_id,
ESP_LOGE(pca9685_tag, "PCA9685 board %d is not ready for communication",
ESP_LOGE(pca9685_tag, "Failed to set ON_L for motor %d on PCA9685 board %d",
ESP_LOGE(pca9685_tag, "Failed to set ON_H for motor %d on PCA9685 board %d",
ESP_LOGE(pca9685_tag, "Failed to set OFF_L for motor %d on PCA9685 board %d",
ESP_LOGE(pca9685_tag, "Failed to set OFF_H for motor %d on PCA9685 board %d",
ESP_LOGD(pca9685_tag, "Moved channel %d on board %d to %.2f°, pulse %u",
ESP_LOGE(pca9685_tag, "PCA9685 board with board_id %d not found", board_id);
-----

./components/controllers/ec11_hal/ec11_hal.c:
ESP_LOGI(ec11_tag, "Clockwise (pos: %ld)", encoder->position);
ESP_LOGI(ec11_tag, "Counterclockwise (pos: %ld)", encoder->position);
ESP_LOGI(ec11_tag, "Button %s", current_button ? "pressed" : "released");
ESP_LOGE(ec11_tag, "Invalid encoder pointer");
ESP_LOGI(ec11_tag, "Initializing EC11 encoder in %s mode",
ESP_LOGE(ec11_tag, "Failed to configure GPIO pins (err=0x%x)", ret);
ESP_LOGE(ec11_tag, "Failed to create mutex");
ESP_LOGE(ec11_tag, "Failed to install ISR service (err=0x%x)", ret);
ESP_LOGE(ec11_tag, "Failed to add ISR handler for pin A (err=0x%x)", ret);
ESP_LOGE(ec11_tag, "Failed to add ISR handler for pin B (err=0x%x)", ret);
ESP_LOGE(ec11_tag, "Failed to add ISR handler for button pin (err=0x%x)", ret);
ESP_LOGI(ec11_tag, "EC11 encoder initialized successfully");
ESP_LOGE(ec11_tag, "Invalid encoder or callback pointer");
ESP_LOGE(ec11_tag, "Invalid encoder data");
-----

./build/CMakeFiles/3.31.5/CompilerIdC/CMakeCCompilerId.c:
-----

./build/bootloader/CMakeFiles/3.31.5/CompilerIdC/CMakeCCompilerId.c:
-----

./build/bootloader/project_elf_src_esp32.c:
-----

./build/project_elf_src_esp32.c:
-----

./main/include/tasks/motor_tasks.c:
ESP_LOGI(motor_tag, "- Starting motor initialization - configuring %d PWM boards", num_pca9685_boards);
ESP_LOGE(motor_tag, "- PWM board initialization failed - hardware communication error");
ESP_LOGI(motor_tag, "- PWM boards initialized - default configuration applied");
ESP_LOGI(motor_tag, "- Configuring encoder callbacks - mapping controls to motors");
ESP_LOGI(motor_tag, "- Encoder configuration complete - manual control ready");
ESP_LOGI(motor_tag, "- Motor task system starting - initializing control interfaces");
ESP_LOGI(motor_tag, "- Motor task system ready - awaiting movement commands");
-----

./main/include/tasks/wifi_tasks.c:
ESP_LOGW(wifi_tag, "- Connection timeout - stopping connection attempts");
ESP_LOGI(wifi_tag, "- Connection attempt started - trying to connect to AP");
ESP_LOGW(wifi_tag, "- Connection lost - will attempt reconnection");
ESP_LOGI(wifi_tag, "- Connection successful - IP address: " IPSTR, IP2STR(&event->ip_info.ip));
ESP_LOGW(wifi_tag, "- Reset skipped - another reset in progress");
ESP_LOGI(wifi_tag, "- WiFi reset initiated - attempting recovery");
ESP_LOGE(wifi_tag, "- WiFi restart failed - error: %s", esp_err_to_name(ret));
ESP_LOGE(wifi_tag, "- Post-reset connection failed - error: %s", esp_err_to_name(ret));
ESP_LOGI(wifi_tag, "- WiFi reset complete - connection attempt initiated");
ESP_LOGI(wifi_tag, "- Network interface initialization started");
ESP_LOGI(wifi_tag, "- Network interface initialization complete");
ESP_LOGE(wifi_tag, "- Connection check failed - WiFi not initialized");
ESP_LOGE(wifi_tag, "- Connection check failed - could not get WiFi mode");
ESP_LOGE(wifi_tag, "- Connection check failed - not in station mode");
ESP_LOGW(wifi_tag, "- Connection check failed - not connected to AP");
ESP_LOGI(wifi_tag, "- Connection check passed - connected to AP");
ESP_LOGI(wifi_tag, "- WiFi station initialization started");
ESP_LOGE(wifi_tag, "- Event group creation failed - insufficient memory");
ESP_LOGE(wifi_tag, "- Network interface initialization failed");
ESP_LOGE(wifi_tag, "- WiFi configuration failed - invalid settings");
ESP_LOGI(wifi_tag, "- Starting WiFi connection with SSID: %s", wifi_ssid);
ESP_LOGI(wifi_tag, "- Starting connection timeout timer - %lu ms", wifi_connect_timeout_ms);
ESP_LOGE(wifi_tag, "- Timer creation failed - insufficient memory");
ESP_LOGI(wifi_tag, "- WiFi connection established successfully");
ESP_LOGW(wifi_tag, "- WiFi connection failed - timeout reached");
ESP_LOGE(wifi_tag, "- WiFi connection failed - unexpected error");
ESP_LOGI(wifi_tag, "- WiFi monitoring task started");
ESP_LOGE(wifi_tag, "- Network interface initialization failed - task terminated");
ESP_LOGI(wifi_tag, "- WiFi connected - starting time synchronization");
ESP_LOGW(wifi_tag, "- Time synchronization failed - will retry after reconnection");
ESP_LOGI(wifi_tag, "- Time synchronized successfully");
ESP_LOGW(wifi_tag, "- Connection lost - attempting immediate reconnection");
ESP_LOGW(wifi_tag, "- Direct reconnection failed - initiating reset: %s", 
ESP_LOGW(wifi_tag, "- Reconnection delayed - following error handler backoff");
ESP_LOGI(wifi_tag, "- Attempting reconnection - error handler permits retry");
ESP_LOGW(wifi_tag, "- Reconnection attempt failed - error: %s", 
ESP_LOGW(wifi_tag, "- Initial time sync failed - will retry after WiFi connection");
ESP_LOGI(wifi_tag, "- WiFi task disabled in configuration - skipping startup");
ESP_LOGI(wifi_tag, "- Creating WiFi monitoring task");
ESP_LOGE(wifi_tag, "- WiFi task creation failed - insufficient resources");
ESP_LOGI(wifi_tag, "- WiFi task created successfully - monitoring started");
-----

./main/include/tasks/system_tasks.c:
ESP_LOGI(system_tag, "- NVS initialization - checking flash memory state");
ESP_LOGW(system_tag, "- NVS flash requires erase - performing cleanup");
ESP_LOGE(system_tag, "- NVS initialization failed - flash memory error: %s", esp_err_to_name(ret));
ESP_LOGI(system_tag, "- NVS initialization complete - flash memory ready");
ESP_LOGE(system_tag, "- NVS initialization failed - storage system unavailable");
ESP_LOGI(system_tag, "- Starting sensor subsystem initialization");
ESP_LOGE(system_tag, "- Sensor initialization failed - communication errors detected");
ESP_LOGI(system_tag, "- Starting camera subsystem initialization");
ESP_LOGE(system_tag, "- Camera initialization failed - hardware communication error");
ESP_LOGI(system_tag, "- Starting motor controller initialization");
ESP_LOGE(system_tag, "- Motor controller initialization failed - PWM system error");
ESP_LOGI(system_tag, "- Starting gait system initialization");
ESP_LOGE(system_tag, "- Gait initialization failed - motor mapping error");
ESP_LOGI(system_tag, "- Starting storage system initialization");
ESP_LOGE(system_tag, "- Storage initialization failed - file system error");
ESP_LOGI(system_tag, "- System initialization complete - all components ready");
ESP_LOGW(system_tag, "- System initialization incomplete - some components failed");
ESP_LOGI(system_tag, "- Starting WiFi subsystem");
ESP_LOGE(system_tag, "- WiFi task failed to start - network functionality limited");
ESP_LOGI(system_tag, "- Starting camera monitoring system");
ESP_LOGE(system_tag, "- Camera monitoring failed to start - vision system offline");
ESP_LOGI(system_tag, "- Starting sensor monitoring system");
ESP_LOGE(system_tag, "- Sensor tasks failed to start - environmental monitoring limited");
ESP_LOGI(system_tag, "- Starting motor control system");
ESP_LOGE(system_tag, "- Motor tasks failed to start - movement system offline");
ESP_LOGI(system_tag, "- All system tasks started successfully - robot fully operational");
ESP_LOGW(system_tag, "- System tasks partially started - some functionality limited");
-----

./main/include/tasks/webserver_tasks.c:
ESP_LOGE(system_tag, "- Data transmission failed - JSON payload is NULL");
ESP_LOGE(system_tag, "- Data transmission failed - network connection unavailable");
ESP_LOGI(system_tag, "- Starting data transmission - preparing HTTP client");
ESP_LOGE(system_tag, "- Data transmission failed - HTTP client initialization error");
ESP_LOGE(system_tag, "- Data transmission failed - could not set Content-Type header");
ESP_LOGE(system_tag, "- Data transmission failed - could not set POST data");
ESP_LOGI(system_tag, "- Transmitting data - sending to server at %s", webserver_url);
ESP_LOGI(system_tag, "- Data transmission successful - server responded with code %d", status_code);
ESP_LOGE(system_tag, "- Data transmission failed - HTTP error: %s", esp_err_to_name(err));
-----

./main/include/tasks/sensor_tasks.c:
ESP_LOGI(system_tag, "- Starting sensor initialization - configuring all enabled sensors");
ESP_LOGI(system_tag, "- Initializing %s sensor", s_sensors[i].sensor_name);
ESP_LOGI(system_tag, "- %s: Initialization successful", s_sensors[i].sensor_name);
ESP_LOGE(system_tag, "- %s: Initialization failed - hardware error or communication issue", 
ESP_LOGI(system_tag, "- %s: Initialization skipped - sensor disabled in configuration", 
ESP_LOGI(system_tag, "- Sensor initialization complete - all enabled sensors ready");
ESP_LOGW(system_tag, "- Sensor initialization partially complete - some sensors failed");
ESP_LOGI(system_tag, "- Starting sensor tasks - creating monitoring threads");
ESP_LOGI(system_tag, "- Creating task for %s sensor", s_sensors[i].sensor_name);
ESP_LOGE(system_tag, "- %s: Task creation failed - insufficient memory or resources",
ESP_LOGI(system_tag, "- %s: Task created successfully with priority %d",
ESP_LOGI(system_tag, "- %s: Task creation skipped - sensor disabled in configuration",
ESP_LOGI(system_tag, "- Sensor tasks started - all monitoring threads active");
ESP_LOGW(system_tag, "- Sensor tasks partially started - some threads failed to start");
-----

./main/include/managers/file_write_manager.c:
ESP_LOGI(file_manager_tag, "- File writer task started - processing queue");
ESP_LOGI(file_manager_tag, "- Processing write request - target: %s", request.file_path);
ESP_LOGE(file_manager_tag, "- Write operation failed - could not open file: %s", request.file_path);
ESP_LOGE(file_manager_tag, "- Write operation incomplete - wrote %zu/%zu bytes to %s", 
ESP_LOGI(file_manager_tag, "- Write operation successful - %zu bytes written to %s", 
ESP_LOGI(file_manager_tag, "- File writer disabled - skipping initialization");
ESP_LOGI(file_manager_tag, "- Starting file writer initialization");
ESP_LOGE(file_manager_tag, "- Queue creation failed - insufficient memory");
ESP_LOGI(file_manager_tag, "- Write queue created - capacity: %lu requests", max_pending_writes);
ESP_LOGE(file_manager_tag, "- Task creation failed - insufficient resources");
ESP_LOGI(file_manager_tag, "- Write task created - priority: %d", s_file_writer_config.priority);
ESP_LOGE(file_manager_tag, "- SD card initialization failed - storage unavailable");
ESP_LOGI(file_manager_tag, "- SD card initialized - storage system ready");
ESP_LOGI(file_manager_tag, "- File writer initialization complete - system operational");
ESP_LOGW(file_manager_tag, "- Write request rejected - file writer is disabled");
ESP_LOGE(file_manager_tag, "- Write request rejected - invalid parameters");
ESP_LOGE(file_manager_tag, "- Write request rejected - queue not initialized");
ESP_LOGI(file_manager_tag, "- Enqueueing write request - target: %s", file_path);
ESP_LOGE(file_manager_tag, "- Write request rejected - queue full");
ESP_LOGI(file_manager_tag, "- Write request accepted - queued for processing");
-----

./main/include/managers/time_manager.c:
ESP_LOGI(time_manager_tag, "- Starting SNTP initialization - configuring time sync");
ESP_LOGI(time_manager_tag, "- SNTP initialization complete - awaiting time sync");
ESP_LOGW(time_manager_tag, "- Using default time - network sync unavailable");
ESP_LOGI(time_manager_tag, "- Default time set - system date: 2024-01-01 00:00:00");
ESP_LOGI(time_manager_tag, "- Starting time manager initialization");
ESP_LOGW(time_manager_tag, "- Network unavailable - falling back to default time");
ESP_LOGI(time_manager_tag, "- Waiting for time sync - attempt %d/%d", retry, max_retries);
ESP_LOGW(time_manager_tag, "- Time sync failed - maximum retries reached");
ESP_LOGI(time_manager_tag, "- Time sync successful - current time: %s", strftime_buf);
ESP_LOGI(time_manager_tag, "- Time manager initialization complete - system clock ready");
-----

./main/gait_movement.c:
ESP_LOGE(gait_tag, "- Joint type invalid - received unknown type: %d", joint_type);
ESP_LOGW(gait_tag, "- Joint angle clamped - value %.2f° below minimum %.2f° for joint type %d", 
ESP_LOGW(gait_tag, "- Joint angle clamped - value %.2f° above maximum %.2f° for joint type %d", 
ESP_LOGE(gait_tag, "- Motor assignment failed - insufficient PCA9685 boards available");
ESP_LOGE(gait_tag, "- Hip angle invalid - %.2f° outside range [%.2f°, %.2f°]",
ESP_LOGE(gait_tag, "- Knee angle invalid - %.2f° outside range [%.2f°, %.2f°]",
ESP_LOGE(gait_tag, "- Tibia angle invalid - %.2f° outside range [%.2f°, %.2f°]",
ESP_LOGI(gait_tag, "- Step calculation - stride: %.2f cm, clearance: %.2f cm", 
ESP_LOGE(gait_tag, "- Processing failed - PCA9685 controller is NULL");
ESP_LOGE(gait_tag, "- Hip motor angle setting failed - error code: %d", ret);
ESP_LOGE(gait_tag, "- Motor angle setting failed - error code: %d", ret);
ESP_LOGI(gait_tag, "- Motor processing complete - all angles set successfully");
ESP_LOGI(gait_tag, "- Tripod gait initiated - heading: %.2f°, distance: %u cm", 
ESP_LOGI(gait_tag, "- Wave gait initiated - heading: %.2f°, distance: %u cm", 
ESP_LOGI(gait_tag, "- Ripple gait initiated - heading: %.2f°, distance: %u cm", 
ESP_LOGI(gait_tag, "- Quadruped gait initiated - heading: %.2f°, distance: %u cm", 
ESP_LOGE(gait_tag, "- Gait initialization failed - PCA9685 controller is NULL");
ESP_LOGI(gait_tag, "- Starting gait initialization - mapping motors to legs");
ESP_LOGE(gait_tag, "- Motor initialization failed - leg %u motors could not be assigned", leg_id);
ESP_LOGI(gait_tag, "- Leg %u initialized - all motors assigned successfully", leg_id);
ESP_LOGI(gait_tag, "- Gait initialization complete - all legs configured successfully");
-----

./main/main.c:
ESP_LOGI(system_tag, "Starting Topographic Robot initialization...");
ESP_LOGE(system_tag, "- System initialization failed - one or more components failed to initialize");
ESP_LOGI(system_tag, "- System initialization successful - all components ready");
ESP_LOGE(system_tag, "- System startup failed - critical tasks could not be started");
ESP_LOGE(system_tag, "- System halted - manual intervention required");
ESP_LOGI(system_tag, "- System startup successful - all tasks running");
ESP_LOGI(system_tag, "Topographic Robot is now operational - monitoring system state");
-----

./main/hexapod_geometry.c:
-----

